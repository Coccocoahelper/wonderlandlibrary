package dev.tenacity.module.impl.misc;

import dev.tenacity.event.IEventListener;
import dev.tenacity.event.impl.packet.PacketReceiveEvent;
import dev.tenacity.module.Module;
import dev.tenacity.module.ModuleCategory;
import dev.tenacity.util.misc.ChatUtil;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C19PacketResourcePackStatus;
import net.minecraft.network.play.server.*;

import java.net.URI;
import java.net.URISyntaxException;

public class AntiExploit extends Module {



    private long lastExplosion = 0, lastExperience = 0;
    private int invalidExperience = 0;
   final int PACKET_THRESHOLD = 100;
    final long CHECK_INTERVAL = 1000;
    int packetCount = 0;

    public AntiExploit() {
        super("AntiExploit", "Prevents server exploits", ModuleCategory.MISC);
    }

    private final IEventListener<PacketReceiveEvent> onReceivePacket = event -> {
        Packet<?> packet = event.getPacket();
        handlePacketCount();
        if(packet instanceof S48PacketResourcePackSend) {
            S48PacketResourcePackSend resourcePack = (S48PacketResourcePackSend) packet;

            try {
                URI uri = new URI(resourcePack.getURL());
                String scheme = uri.getScheme();

                boolean isLevelProtocol = scheme.equalsIgnoreCase("level");
                boolean isHttpProtocol = scheme.equalsIgnoreCase("http");
                boolean isHttpsProtocol = scheme.equalsIgnoreCase("https");

                if(!isHttpProtocol && !isHttpsProtocol && !isLevelProtocol) {
                    ChatUtil.print("§cBlocked Exploit: Resource Pack");
                    event.cancel();
                } else if(isLevelProtocol && (resourcePack.getURL().contains("..") || !((S48PacketResourcePackSend) packet).getURL().endsWith("/resources.zip"))) {
                    ChatUtil.print("§cBlocked Exploit: File Access");
                    event.cancel();
                    mc.getNetHandler().addToSendQueue(new C19PacketResourcePackStatus(((S48PacketResourcePackSend) packet).getHash(), C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
                }
            } catch (URISyntaxException exception) {
                ChatUtil.print("§cBlocked Exploit: Resource Pack");
                event.cancel();
                mc.getNetHandler().addToSendQueue(new C19PacketResourcePackStatus(((S48PacketResourcePackSend) packet).getHash(), C19PacketResourcePackStatus.Action.FAILED_DOWNLOAD));
            }
        } else if(packet instanceof S43PacketCamera && !mc.thePlayer.isSpectator()) {
            ChatUtil.print("§cBlocked Exploit: Crash");
            event.cancel();
        } else if(packet instanceof S2APacketParticles) {
            S2APacketParticles particles = (S2APacketParticles) packet;
            if(Math.abs(particles.getParticleSpeed()) >= 1) {
                ChatUtil.print("§cBlocked Exploit: Particles");
                event.cancel();
            } else if(((S2APacketParticles) packet).getParticleCount() > 1) {
                ChatUtil.print("§cBlocked Exploit: Crash");
                event.cancel();
            }
        } else if(packet instanceof S27PacketExplosion) {
            S27PacketExplosion explosion = (S27PacketExplosion) packet;

            if(Math.abs(explosion.getStrength()) > 1) {
                ChatUtil.print("§cBlocked Exploit: Crash");
                event.cancel();
            } else if(System.currentTimeMillis() - lastExplosion <= 1) {
                ChatUtil.print("§cBlocked Exploit: Crash");
                event.cancel();
            } else if(packet instanceof S2APacketParticles) {
            S2APacketParticles particles = (S2APacketParticles) packet;

            if(Math.abs(particles.getParticleSpeed()) > 1) {
                ChatUtil.print("§cBlocked Exploit: Particles");
                event.cancel();
            } else if(particles.getParticleCount() >= 1) {
                ChatUtil.print("§cBlocked Exploit: Crash");
                event.cancel();
            }
        }

            lastExplosion = System.currentTimeMillis();
        } else if(packet instanceof S18PacketEntityTeleport) {
            S18PacketEntityTeleport teleport = (S18PacketEntityTeleport) packet;

            double packetX = Math.abs(teleport.getX());
            double packetY = Math.abs(teleport.getY());
            double packetZ = Math.abs(teleport.getZ());

            if(packetX > 30000000 || packetY > 30000000 || packetZ > 30000000) {
                ChatUtil.print("§cBlocked Exploit: Teleport");
                event.cancel();
            }
        } else if(packet instanceof S11PacketSpawnExperienceOrb) {
            if(System.currentTimeMillis() - lastExperience <= 1) {
                invalidExperience++;

                if(invalidExperience >= 2) {
                    ChatUtil.print("§cBlocked Exploit: Crash");
                    event.cancel();
                }
            } else {
                invalidExperience = 0;
            }
            lastExperience = System.currentTimeMillis();
        }

    };

    private void triggerKick() {
        ChatUtil.print("§cAbnormal packet activity detected. Kicking player...");
    }
        private void handlePacketCount() {
            long currentTime = System.currentTimeMillis();

            long lastPacketCheckTime = 0;
            if (currentTime - lastPacketCheckTime > CHECK_INTERVAL) {
                packetCount = 0;
                lastPacketCheckTime = currentTime;
            }
            packetCount++;
            if (packetCount > PACKET_THRESHOLD) {
                triggerKick();
                packetCount = 0;
        }

    }

}
