// 
// Decompiled by Procyon v0.5.36
// 

package dev.tenacity.module.impl.exploit;

import dev.tenacity.event.impl.game.WorldEvent;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import dev.tenacity.event.impl.network.PacketReceiveEvent;
import net.minecraft.entity.Entity;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import dev.tenacity.Tenacity;
import dev.tenacity.module.impl.movement.Speed;
import net.minecraft.potion.Potion;
import net.minecraft.network.play.client.C03PacketPlayer;
import dev.tenacity.utils.server.ServerUtils;
import dev.tenacity.event.impl.network.PacketSendEvent;
import java.util.Iterator;
import net.minecraft.network.play.client.C0CPacketInput;
import java.util.function.Consumer;
import dev.tenacity.utils.server.PacketUtils;
import dev.tenacity.utils.misc.MathUtils;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.List;
import dev.tenacity.event.impl.player.MotionEvent;
import dev.tenacity.module.settings.Setting;
import dev.tenacity.module.Category;
import net.minecraft.network.Packet;
import java.util.concurrent.CopyOnWriteArrayList;
import dev.tenacity.utils.time.TimerUtil;
import dev.tenacity.module.settings.impl.BooleanSetting;
import dev.tenacity.module.settings.impl.NumberSetting;
import dev.tenacity.module.settings.impl.MultipleBoolSetting;
import dev.tenacity.module.Module;

public final class Disabler extends Module
{
    private final MultipleBoolSetting disablers;
    private final NumberSetting hoverHeight;
    private final BooleanSetting onGround;
    private final NumberSetting TPDelay;
    private final TimerUtil timer;
    private final TimerUtil joinTimer;
    private boolean synced;
    private final CopyOnWriteArrayList<Packet> watchdogPlayerPackets;
    private final CopyOnWriteArrayList<Packet> watchdogC0FC00Packets;
    private final CopyOnWriteArrayList<Packet> watchdogInvPackets;
    private final CopyOnWriteArrayList<Packet> packets;
    private double s08Y;
    public static boolean spiking;
    public static final TimerUtil spikeTimer;
    private int airTicks;
    
    public Disabler() {
        super("Disabler", "Disabler", Category.EXPLOIT, "Disables some anticheats");
        this.disablers = new MultipleBoolSetting("Disablers", new BooleanSetting[] { new BooleanSetting("Watchdog Strafe", false), new BooleanSetting("Watchdog Timer", false), new BooleanSetting("MMC", false), new BooleanSetting("C06->C04", false), new BooleanSetting("C04->C06", false), new BooleanSetting("Hover", false), new BooleanSetting("Spoof Ground", false), new BooleanSetting("C0B Cancel", false), new BooleanSetting("C0C Spam", false), new BooleanSetting("Verus", false), new BooleanSetting("Omni Sprint", false), new BooleanSetting("Void TP", false), new BooleanSetting("Silent S08", false) });
        this.hoverHeight = new NumberSetting("Hover Height", 0.1, 5.0, 0.01, 0.01);
        this.onGround = new BooleanSetting("On Ground", true);
        this.TPDelay = new NumberSetting("TP Delay", 20.0, 100.0, 5.0, 1.0);
        this.timer = new TimerUtil();
        this.joinTimer = new TimerUtil();
        this.watchdogPlayerPackets = new CopyOnWriteArrayList<Packet>();
        this.watchdogC0FC00Packets = new CopyOnWriteArrayList<Packet>();
        this.watchdogInvPackets = new CopyOnWriteArrayList<Packet>();
        this.packets = new CopyOnWriteArrayList<Packet>();
        this.TPDelay.addParent(this.disablers, voidTPDisabler -> voidTPDisabler.getSetting("Void TP").isEnabled());
        this.hoverHeight.addParent(this.disablers, hoverDisabler -> hoverDisabler.getSetting("Hover").isEnabled());
        this.onGround.addParent(this.disablers, spoofGroundDisabler -> spoofGroundDisabler.getSetting("Spoof Ground").isEnabled());
        this.addSettings(this.disablers, this.TPDelay, this.onGround, this.hoverHeight);
    }
    
    @Override
    public void onMotionEvent(final MotionEvent event) {
        final List<BooleanSetting> enabledBooleanSettings = this.disablers.getBoolSettings().stream().filter(BooleanSetting::isEnabled).collect((Collector<? super BooleanSetting, ?, List<BooleanSetting>>)Collectors.toList());
        if (enabledBooleanSettings.size() == 1) {
            this.setSuffix(enabledBooleanSettings.get(0).name);
        }
        else if (enabledBooleanSettings.size() > 1) {
            this.setSuffix(enabledBooleanSettings.size() + " Enabled");
        }
        else {
            this.setSuffix("None");
        }
        for (final BooleanSetting booleanSetting : this.disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                final String name = booleanSetting.name;
                switch (name) {
                    case "MMC": {
                        if (this.timer.hasTimeElapsed(MathUtils.getRandomInRange(1000, 1500), true)) {
                            this.packets.forEach(PacketUtils::sendPacketNoEvent);
                            this.packets.clear();
                            continue;
                        }
                        continue;
                    }
                    case "Watchdog Timer": {
                        if (Disabler.spikeTimer.hasTimeElapsed(700L, true)) {
                            this.timer.reset();
                            continue;
                        }
                        continue;
                    }
                    case "C0C Spam": {
                        PacketUtils.sendPacketNoEvent(new C0CPacketInput());
                        continue;
                    }
                }
            }
        }
    }
    
    @Override
    public void onPacketSendEvent(final PacketSendEvent event) {
        if (Disabler.mc.thePlayer == null) {
            return;
        }
        for (final BooleanSetting booleanSetting : this.disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                final String name = booleanSetting.name;
                switch (name) {
                    case "Watchdog Strafe": {
                        if (ServerUtils.isOnHypixel() && event.getPacket() instanceof C03PacketPlayer && !Disabler.mc.thePlayer.isPotionActive(Potion.jump)) {
                            final C03PacketPlayer c03 = (C03PacketPlayer)event.getPacket();
                            if (Tenacity.INSTANCE.getModuleCollection().getModule(Speed.class).isEnabled() && Disabler.mc.thePlayer.fallDistance < 1.0f) {
                                c03.setOnGround(true);
                            }
                            if (Tenacity.INSTANCE.getModuleCollection().getModule(Speed.class).isEnabled() && Disabler.mc.thePlayer.ticksExisted % 4 != 0 && Disabler.mc.thePlayer.fallDistance < 1.0f) {
                                event.cancel();
                                this.watchdogPlayerPackets.add(event.getPacket());
                            }
                            else {
                                if (this.watchdogPlayerPackets.isEmpty()) {
                                    continue;
                                }
                                this.watchdogPlayerPackets.forEach(PacketUtils::sendPacketNoEvent);
                                this.watchdogPlayerPackets.clear();
                            }
                            continue;
                        }
                        continue;
                    }
                    case "Watchdog Timer": {
                        if (!ServerUtils.isOnHypixel()) {
                            continue;
                        }
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer)event.getPacket();
                            if (!c03.isMoving() && !c03.getRotating()) {
                                event.cancel();
                                continue;
                            }
                        }
                        if (!this.timer.hasTimeElapsed(350L)) {
                            if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
                                event.cancel();
                                this.watchdogC0FC00Packets.add(event.getPacket());
                                continue;
                            }
                            continue;
                        }
                        else {
                            if (!this.watchdogC0FC00Packets.isEmpty()) {
                                this.watchdogC0FC00Packets.forEach(PacketUtils::sendPacketNoEvent);
                                this.watchdogC0FC00Packets.clear();
                                continue;
                            }
                            continue;
                        }
                        break;
                    }
                    case "Void TP": {
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer)event.getPacket();
                            if (Disabler.mc.thePlayer.ticksExisted % this.TPDelay.getValue() != 0.0) {
                                continue;
                            }
                            c03.setY(c03.getPositionY() - 1000.0);
                            continue;
                        }
                        continue;
                    }
                    case "MMC": {
                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            final C0BPacketEntityAction c0b = (C0BPacketEntityAction)event.getPacket();
                            if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING) && EntityPlayerSP.serverSprintState) {
                                PacketUtils.sendPacketNoEvent(new C0BPacketEntityAction(Disabler.mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                                EntityPlayerSP.serverSprintState = false;
                            }
                            event.cancel();
                        }
                        if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
                            event.cancel();
                            this.packets.add(event.getPacket());
                            continue;
                        }
                        continue;
                    }
                    case "C06->C04": {
                        if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                            final C03PacketPlayer.C06PacketPlayerPosLook c4 = (C03PacketPlayer.C06PacketPlayerPosLook)event.getPacket();
                            event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(c4.getPositionX(), c4.getPositionY(), c4.getPositionZ(), c4.isOnGround()));
                            continue;
                        }
                        continue;
                    }
                    case "C04->C06": {
                        if (event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition) {
                            final C03PacketPlayer.C04PacketPlayerPosition c5 = (C03PacketPlayer.C04PacketPlayerPosition)event.getPacket();
                            event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(c5.getPositionX(), c5.getPositionY(), c5.getPositionZ(), Disabler.mc.thePlayer.rotationYaw, Disabler.mc.thePlayer.rotationPitch, c5.isOnGround()));
                            continue;
                        }
                        continue;
                    }
                    case "Hover": {
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer)event.getPacket();
                            c03.setY(Disabler.mc.thePlayer.posY + this.hoverHeight.getValue());
                            continue;
                        }
                        continue;
                    }
                    case "Spoof Ground": {
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer)event.getPacket();
                            c03.setOnGround(this.onGround.isEnabled());
                            continue;
                        }
                        continue;
                    }
                    case "C0B Cancel": {
                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            event.cancel();
                            continue;
                        }
                        continue;
                    }
                    case "Verus": {
                        if (event.getPacket() instanceof C0FPacketConfirmTransaction || event.getPacket() instanceof C00PacketKeepAlive) {
                            event.cancel();
                            continue;
                        }
                        continue;
                    }
                    case "Omni Sprint": {
                        if (event.getPacket() instanceof C0BPacketEntityAction) {
                            final C0BPacketEntityAction c0b = (C0BPacketEntityAction)event.getPacket();
                            if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING) && EntityPlayerSP.serverSprintState) {
                                PacketUtils.sendPacketNoEvent(new C0BPacketEntityAction(Disabler.mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                                EntityPlayerSP.serverSprintState = false;
                            }
                            event.cancel();
                            continue;
                        }
                        continue;
                    }
                }
            }
        }
    }
    
    @Override
    public void onPacketReceiveEvent(final PacketReceiveEvent event) {
        for (final BooleanSetting booleanSetting : this.disablers.getBoolSettings()) {
            if (booleanSetting.isEnabled()) {
                final String name = booleanSetting.name;
                switch (name) {
                    case "Silent S08": {
                        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
                            final S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook)event.getPacket();
                            event.cancel();
                            PacketUtils.sendPacketNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(s08.getX(), s08.getY(), s08.getZ(), s08.getYaw(), s08.getPitch(), false));
                            continue;
                        }
                        continue;
                    }
                }
            }
        }
    }
    
    private boolean isBlockUnder() {
        if (Disabler.mc.thePlayer.posY < 0.0) {
            return false;
        }
        for (int offset = 0; offset < (int)Disabler.mc.thePlayer.posY + 2; offset += 2) {
            final AxisAlignedBB bb = Disabler.mc.thePlayer.getEntityBoundingBox().offset(0.0, -offset, 0.0);
            if (!Disabler.mc.theWorld.getCollidingBoundingBoxes(Disabler.mc.thePlayer, bb).isEmpty()) {
                return true;
            }
        }
        return false;
    }
    
    @Override
    public void onWorldEvent(final WorldEvent event) {
        this.watchdogC0FC00Packets.clear();
        this.timer.reset();
    }
    
    static {
        spikeTimer = new TimerUtil();
    }
}
