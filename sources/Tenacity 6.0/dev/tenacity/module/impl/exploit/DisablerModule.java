package dev.tenacity.module.impl.exploit;

import dev.tenacity.Tenacity;
import dev.tenacity.event.IEventListener;
import dev.tenacity.event.impl.packet.PacketSendEvent;
import dev.tenacity.event.impl.player.UpdateEvent;
import dev.tenacity.module.Module;
import dev.tenacity.module.ModuleCategory;
import dev.tenacity.module.impl.combat.KillAuraModule;

import java.util.concurrent.*;

import dev.tenacity.module.impl.movement.FlightModule;
import dev.tenacity.module.impl.movement.SpeedModule;
import dev.tenacity.setting.impl.BooleanSetting;
import dev.tenacity.setting.impl.ModeSetting;
import dev.tenacity.setting.impl.NumberSetting;
import dev.tenacity.util.misc.ChatUtil;
import dev.tenacity.util.misc.MathUtil;
import dev.tenacity.util.misc.TimerUtil;
import dev.tenacity.util.network.PacketUtil;
import dev.tenacity.util.network.PacketUtils;
import dev.tenacity.util.player.MovementUtil;
import io.netty.buffer.Unpooled;
import jdk.internal.org.objectweb.asm.commons.StaticInitMerger;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.potion.Potion;
import net.minecraft.util.Timer;
import net.optifine.reflect.ReflectorForge;
import org.checkerframework.checker.units.qual.Speed;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

public final class DisablerModule extends Module {
    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final NumberSetting TPDelay = new NumberSetting("TP Delay", 20, 100, 5, 1);

    private final TimerUtil timer = new TimerUtil(), joinTimer = new TimerUtil();

    private boolean synced;

    private final CopyOnWriteArrayList<Packet> watchdogPlayerPackets = new CopyOnWriteArrayList<>(), watchdogC0FC00Packets = new CopyOnWriteArrayList<>(), watchdogInvPackets = new CopyOnWriteArrayList<>();

    private final CopyOnWriteArrayList<Packet> packets = new CopyOnWriteArrayList<>();

    private double s08Y;

    public static boolean spiking;
    public static final TimerUtil spikeTimer = new TimerUtil();

    private int airTicks;
    private final ModeSetting mode = new ModeSetting("Mode", "Watchdog", "Sprint", "Mineland", "BlocksMC", "Verus", "Vulcan", "Negativity", "C06->C04", "C04->C06");

    private final TimerUtil timerUtil = new TimerUtil();
    private final List<Packet<?>> watchdogPacketList = new ArrayList<>();

    public DisablerModule() {
        super("Disabler", "Exploits anti cheat's into lessening or disabling completely", ModuleCategory.EXPLOIT);
        initializeSettings(mode);
    }

    private final IEventListener<UpdateEvent> onUpdateEvent = event -> setSuffix(mode.getCurrentMode());
    private final IEventListener<PacketSendEvent> onPacketSendEvent = event -> {
        switch (mode.getCurrentMode()) {
            case "Sprint":
                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                    if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                        if (mc.thePlayer.serverSprintState) {
                            mc.getNetHandler().addToSendQueueNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            mc.thePlayer.serverSprintState = false;
                        }
                        event.cancel();
                    } else if (c0b.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING))
                        event.cancel();
                }
                break;

            case "Watchdog": {

            }

            case "Verus":
                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                    if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                        if (mc.thePlayer.serverSprintState) {
                            mc.getNetHandler().addToSendQueueNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            mc.thePlayer.serverSprintState = false;
                        }
                        event.cancel();
                    } else if (c0b.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING))
                        event.cancel();
                }
                if (mc.thePlayer == null) {
                    return;
                } else {
                    mc.thePlayer.setSprinting(true);
                    mc.thePlayer.setClientBrand("Lunar");
                    break;
                }

            case "Vulcan": {
                if (mc.thePlayer != null && mc.thePlayer.isDead) {
                    if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        event.cancel();
                    }
                }
                if (mc.thePlayer.getClientBrand() != "Lunar") {
                    ChatUtil.print("Client brand doesnt = Lunar, changing...");
                    mc.thePlayer.setClientBrand("Lunar");
                }
                if (mc.thePlayer != null) {
                    if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                        final C03PacketPlayer.C06PacketPlayerPosLook c06 = (C03PacketPlayer.C06PacketPlayerPosLook) event.getPacket();
                        event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(c06.getPositionX(), c06.getPositionY(), c06.getPositionZ(), c06.isOnGround()));
                    }
                    if (event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition) {
                        final C03PacketPlayer.C04PacketPlayerPosition c04 = (C03PacketPlayer.C04PacketPlayerPosition) event.getPacket();
                        event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(c04.getPositionX(), c04.getPositionY(), c04.getPositionZ(), mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, c04.isOnGround()));
                    }
                    if (event.getPacket() instanceof C0BPacketEntityAction) {
                        final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                        if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                            if (mc.thePlayer.serverSprintState) {
                                mc.getNetHandler().addToSendQueueNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                                mc.thePlayer.serverSprintState = false;
                            }
                            event.cancel();
                        } else if (c0b.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING))
                            event.cancel();
                    }
                } else {
                    return;
                }
            }

            case "C06->C04":
                if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
                    final C03PacketPlayer.C06PacketPlayerPosLook c06 = (C03PacketPlayer.C06PacketPlayerPosLook) event.getPacket();
                    event.setPacket(new C03PacketPlayer.C04PacketPlayerPosition(c06.getPositionX(), c06.getPositionY(), c06.getPositionZ(), c06.isOnGround()));
                }
                break;

            case "C04->C06":
                if (event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition) {
                    final C03PacketPlayer.C04PacketPlayerPosition c04 = (C03PacketPlayer.C04PacketPlayerPosition) event.getPacket();
                    event.setPacket(new C03PacketPlayer.C06PacketPlayerPosLook(c04.getPositionX(), c04.getPositionY(), c04.getPositionZ(), mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, c04.isOnGround()));
                }
                break;

            case "Mineland":
                final ConcurrentLinkedQueue<Packet<?>> packets = new ConcurrentLinkedQueue<>();
                    if (Tenacity.getInstance().getModuleRepository().getModule(FlightModule.class).isEnabled()) {

                    }

                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                    if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                        if (mc.thePlayer.serverSprintState) {
                            mc.getNetHandler().addToSendQueueNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            mc.thePlayer.serverSprintState = false;
                        }
                        mc.thePlayer.ticksExisted = 0;
                        event.cancel();
                    } else if (c0b.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING))
                        event.cancel();
                }
                break;

            case "BlocksMC":
                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                    if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                        if (mc.thePlayer.serverSprintState) {
                            mc.getNetHandler().addToSendQueueNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            mc.thePlayer.serverSprintState = false;
                        }
                        event.cancel();
                    } else if (c0b.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING))
                        event.cancel();
                }
                if (PacketUtil.isClientPacket(event.getPacket())) {
                    if (!mc.thePlayer.onGround && mc.thePlayer.fallDistance < 1 && mc.thePlayer.hurtTime == 0) {
                        event.cancel();
                        watchdogPacketList.add(event.getPacket());
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer) event.getPacket();
                            c03.setOnGround(true);
                        }
                    } else if (!watchdogPacketList.isEmpty()) {
                        watchdogPacketList.forEach(mc.getNetHandler()::addToSendQueueNoEvent);
                        watchdogPacketList.clear();
                        ChatUtil.success("Sent Packet");
                    }
                }

            case "Negativity": {
                if (event.getPacket() instanceof C0BPacketEntityAction) {
                    final C0BPacketEntityAction c0b = (C0BPacketEntityAction) event.getPacket();
                    if (c0b.getAction().equals(C0BPacketEntityAction.Action.START_SPRINTING)) {
                        if (mc.thePlayer.serverSprintState) {
                            mc.getNetHandler().addToSendQueueNoEvent(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                            mc.thePlayer.serverSprintState = false;
                        }
                        event.cancel();
                    } else if (c0b.getAction().equals(C0BPacketEntityAction.Action.STOP_SPRINTING))
                        event.cancel();
                }
                if (PacketUtil.isClientPacket(event.getPacket())) {
                    if (!mc.thePlayer.onGround && mc.thePlayer.fallDistance < 1 && mc.thePlayer.hurtTime == 0) {
                        event.cancel();
                        watchdogPacketList.add(event.getPacket());
                        if (event.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer c03 = (C03PacketPlayer) event.getPacket();
                            c03.setOnGround(true);
                        }
                    } else if (!watchdogPacketList.isEmpty()) {
                        watchdogPacketList.forEach(mc.getNetHandler()::addToSendQueueNoEvent);
                        watchdogPacketList.clear();
                        ChatUtil.success("Sent packet");
                    }
                }
                break;
            }
        }
    };
    @Override
    public void onEnable() {
        if (mc.thePlayer == null) {
            return;
        }
        super.onEnable();
    }

    @Override
    public void onDisable() {
        if (mc.thePlayer == null) {
            return;
        }
        super.onDisable();
    }
}