/* November.lol Â© 2023 */
package lol.november.feature.module.impl.exploit;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import lol.november.feature.module.Category;
import lol.november.feature.module.Module;
import lol.november.feature.module.Register;
import lol.november.feature.setting.Setting;
import lol.november.listener.bus.Listener;
import lol.november.listener.bus.Subscribe;
import lol.november.listener.event.net.EventPacket;
import lol.november.listener.event.player.EventUpdate;
import net.minecraft.block.BlockGlass;
import net.minecraft.block.state.IBlockState;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C01PacketChatMessage;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;

/**
 * @author Gavin
 * @since 2.0.0
 */
@Register(
  name = "Phase",
  description = "Phases through blocks",
  category = Category.EXPLOIT
)
public class PhaseModule extends Module {

  private final Setting<Mode> mode = new Setting<>("Mode", Mode.CAGE_PHASE);
  private final Setting<Server> server = new Setting<>(
    "Server",
    Server.BLOCKS_MC
  );

  private final Queue<Packet<?>> packetQueue = new ConcurrentLinkedQueue<>();
  private int ticksSinceLastSetback = -1;

  private BlockPos phasePos;
  private IBlockState phaseState;
  private boolean cagePhasing, canPhase = true;

  @Override
  public void enable() {
    super.enable();
    canPhase = server.getValue() == Server.GENERIC;
  }

  @Override
  public void disable() {
    super.disable();

    if (mc.thePlayer != null && !packetQueue.isEmpty()) {
      while (!packetQueue.isEmpty()) {
        mc.thePlayer.sendQueue.addToSendQueueSilent(packetQueue.poll());
      }
    }

    packetQueue.clear();
    ticksSinceLastSetback = -1;

    if (cagePhasing) {
      if (phasePos != null && phaseState != null) {
        mc.theWorld.setBlockState(phasePos, phaseState);
      }

      cagePhasing = false;
      phasePos = null;
      phaseState = null;
    }

    canPhase = true;
  }

  @Subscribe
  private final Listener<EventUpdate> update = event -> {
    if (mc.thePlayer.ticksExisted < 5) {
      packetQueue.clear();
      ticksSinceLastSetback = 0;
      phaseState = null;
      phasePos = null;
      cagePhasing = false;

      canPhase = server.getValue() == Server.GENERIC;

      return;
    }

    ticksSinceLastSetback++;

    if (mode.getValue() == Mode.CAGE_PHASE) {
      if (
        ticksSinceLastSetback < 20 || !mc.thePlayer.onGround || !canPhase
      ) return;

      if (!cagePhasing) {
        BlockPos under = new BlockPos(mc.thePlayer.getPositionVector()).down();
        IBlockState state = mc.theWorld.getBlockState(under);
        if (state.getBlock() instanceof BlockGlass) {
          cagePhasing = true;
          mc.theWorld.setBlockToAir(under);

          // Printer.print("Phased through glass");

          phasePos = under;
          phaseState = state;
        }
      } else {
        if (phasePos != null && phaseState != null) {
          // Printer.print("Replaced glass to not desync");
          mc.theWorld.setBlockState(phasePos, phaseState);
          phaseState = null;
        }
      }
    }
  };

  @Subscribe
  private final Listener<EventPacket.Out> packetOut = event -> {
    if (mc.thePlayer == null || mc.thePlayer.ticksExisted < 10) return;

    if (cagePhasing) {
      if (event.get() instanceof C01PacketChatMessage) return;
      event.setCanceled(true);
      packetQueue.add(event.get());
    }
  };

  @Subscribe
  private final Listener<EventPacket.In> packetIn = event -> {
    if (event.get() instanceof S08PacketPlayerPosLook) {
      ticksSinceLastSetback = 0;
      // Printer.print("Setback");
    } else if (event.get() instanceof S02PacketChat packet) {
      if (mode.getValue() != Mode.CAGE_PHASE) return;

      String raw = packet.getChatComponent().getUnformattedText();

      if (server.getValue() == Server.HYPIXEL) {
        // TODO
      } else if (server.getValue() == Server.BLOCKS_MC) {
        if (raw.contains("Cages open in: 2 seconds!")) {
          canPhase = true;
        } else if (raw.contains("Cages opened! FIGHT!")) {
          setState(false);
        }
      }
    }
  };

  private enum Mode {
    CAGE_PHASE,
  }

  private enum Server {
    GENERIC,
    BLOCKS_MC,
    HYPIXEL,
  }
}
