/*
 * Decompiled with CFR 0.152.
 */
package tk.rektsky.module.impl.exploits;

import cc.hyperium.utils.HyperiumFontRenderer;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import net.minecraft.client.gui.Gui;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S01PacketJoinGame;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S13PacketDestroyEntities;
import net.minecraft.network.play.server.S1BPacketEntityAttach;
import org.greenrobot.eventbus.Subscribe;
import tk.rektsky.Client;
import tk.rektsky.event.impl.HUDRenderEvent;
import tk.rektsky.event.impl.PacketReceiveEvent;
import tk.rektsky.event.impl.PacketSentEvent;
import tk.rektsky.event.impl.WorldTickEvent;
import tk.rektsky.module.Category;
import tk.rektsky.module.Module;
import tk.rektsky.module.ModulesManager;
import tk.rektsky.module.impl.render.Notification;
import tk.rektsky.module.impl.world.Timer;
import tk.rektsky.utils.combat.RotationUtil;
import tk.rektsky.utils.display.ColorUtil;
import tk.rektsky.utils.inventory.InventoryUtils;

public class GodMode
extends Module {
    private Map<Integer, Queue<Packet<?>>> queue = new HashMap();
    private static final HyperiumFontRenderer font = new HyperiumFontRenderer(HyperiumFontRenderer.getCasperBold(), 69.0f);
    public int currTick = 0;
    public int leftTick = 0;
    private boolean waitingForReset = false;
    public int keepAliveTick = 0;
    public long displayTime = 0L;
    public boolean last = false;

    public GodMode() {
        super("GodMode", "Be a god.", Category.EXPLOIT);
    }

    @Override
    public void onEnable() {
        this.currTick = 0;
        this.leftTick = 0;
        this.waitingForReset = false;
        this.queue.clear();
        Client.notify(new Notification.PopupMessage("Final GrandPa", "Please place two boats next to each other and right click", ColorUtil.NotificationColors.YELLOW, 80));
    }

    @Override
    public void onDisable() {
    }

    @Subscribe
    public void onWorldTick(WorldTickEvent event) {
        ++this.currTick;
        if (this.mc.thePlayer.ridingEntity != null) {
            for (Entity entity : this.mc.theWorld.getLoadedEntityList()) {
                double deltaZ;
                double deltaY;
                double deltaX;
                if (!(entity instanceof EntityBoat) || !(Math.sqrt((deltaX = entity.posX - this.mc.thePlayer.posX) * deltaX + (deltaY = entity.posY - this.mc.thePlayer.posY) * deltaY + (deltaZ = entity.posZ - this.mc.thePlayer.posZ) * deltaZ) < 5.0)) continue;
                this.mc.timer.timerSpeed = 0.5;
                RotationUtil.setRotating("GODMODE", true);
                if (entity == this.mc.thePlayer.ridingEntity) continue;
                int item = -1;
                double highest = 0.0;
                for (int i2 = 36; i2 < 45; ++i2) {
                    if (this.mc.thePlayer.inventoryContainer.getSlot(i2).getStack() == null || !(InventoryUtils.getAttackDamage(this.mc.thePlayer.inventoryContainer.getSlot(i2).getStack()) > highest)) continue;
                    highest = InventoryUtils.getAttackDamage(this.mc.thePlayer.inventoryContainer.getSlot(i2).getStack());
                    item = i2 - 36;
                }
                if (highest == 0.0) {
                    item = -1;
                }
                if (item != -1) {
                    if (item != this.mc.thePlayer.inventory.currentItem) {
                        this.mc.thePlayer.inventory.currentItem = item;
                        return;
                    }
                } else {
                    Client.addClientChat("You need to hold a better weapon");
                    return;
                }
                if (this.mc.thePlayer.getCurrentEquippedItem() == null || InventoryUtils.getAttackDamage(this.mc.thePlayer.getCurrentEquippedItem()) < 4.0) {
                    Client.addClientChat("You need to hold a better weapon");
                    return;
                }
                RotationUtil.setPitch(90.0f);
                this.mc.thePlayer.swingItem();
                this.mc.playerController.attackEntity(this.mc.thePlayer, this.mc.thePlayer.ridingEntity);
                this.mc.thePlayer.swingItem();
                this.mc.playerController.attackEntity(this.mc.thePlayer, entity);
                return;
            }
        } else {
            this.mc.timer.timerSpeed = !ModulesManager.getModuleByClass(Timer.class).isToggled() ? 1.0 : ModulesManager.getModuleByClass(Timer.class).timerSpeed.getValue();
            RotationUtil.setRotating("GODMODE", false);
        }
    }

    @Subscribe
    public void onWorldChange(PacketReceiveEvent event) {
        if (event.getPacket() instanceof S07PacketRespawn || event.getPacket() instanceof S01PacketJoinGame) {
            this.queue.clear();
            this.currTick = 0;
            this.waitingForReset = false;
        }
        if (event.getPacket() instanceof S13PacketDestroyEntities) {
            if (((S13PacketDestroyEntities)event.getPacket()).getEntityIDs().length != 1) {
                for (int entityID : ((S13PacketDestroyEntities)event.getPacket()).getEntityIDs()) {
                    if (entityID != this.mc.thePlayer.ridingEntity.getEntityId()) continue;
                    Client.notify(new Notification.PopupMessage("Final GrandPa", "Final GrandPa Activated! (GodMode + Semi Disabler)", ColorUtil.NotificationColors.GREEN, 80));
                    this.waitingForReset = true;
                }
            } else {
                for (int entityID : ((S13PacketDestroyEntities)event.getPacket()).getEntityIDs()) {
                    if (entityID != this.mc.thePlayer.ridingEntity.getEntityId()) continue;
                    Client.notify(new Notification.PopupMessage("Final GrandPa", "Activation of Final GrandPa has Failed!!", ColorUtil.NotificationColors.RED, 80));
                    this.displayTime = System.currentTimeMillis();
                    for (int i2 = 0; i2 < 20; ++i2) {
                        Client.addClientChat("YOU HAVEN'T ACTIVATED FINAL GRANDPA SUCCESSFULLY!");
                    }
                }
            }
        }
        if (event.getPacket() instanceof S1BPacketEntityAttach && ((S1BPacketEntityAttach)event.getPacket()).getEntityId() == this.mc.thePlayer.getEntityId() && ((S1BPacketEntityAttach)event.getPacket()).getVehicleEntityId() > 0) {
            this.currTick = 0;
        }
    }

    public void addToQueue(Packet<?> packet) {
        Queue<Object> packets = null;
        if (this.queue.containsKey(this.currTick + 50)) {
            packets = this.queue.get(this.currTick + 50);
        } else {
            packets = new ArrayDeque();
            this.queue.put(this.currTick + 50, packets);
        }
        packets.add(packet);
    }

    @Subscribe
    public void onPacket(PacketSentEvent event) {
        if (event.getPacket() instanceof C03PacketPlayer) {
            if (this.mc.thePlayer.isRiding()) {
                ((C03PacketPlayer)event.getPacket()).onGround = false;
            }
            if (this.waitingForReset) {
                ((C03PacketPlayer)event.getPacket()).onGround = false;
            }
            if (!this.mc.thePlayer.isRiding() || this.mc.thePlayer.ridingEntity == null || this.currTick <= 50) {
                // empty if block
            }
            if (!(this.mc.thePlayer.getHealth() < 19.0f) || !this.waitingForReset || this.mc.thePlayer.isDead || this.mc.thePlayer.onGround) {
                // empty if block
            }
        }
    }

    @Subscribe
    public void renderWarning(HUDRenderEvent event) {
        if (System.currentTimeMillis() - this.displayTime < 2000L) {
            boolean bl = this.last = !this.last;
            if (this.last) {
                Gui.drawRect(0, 0, event.getScaledResolution().getScaledWidth(), event.getScaledResolution().getScaledHeight(), -65536);
            } else {
                Gui.drawRect(0, 0, event.getScaledResolution().getScaledWidth(), event.getScaledResolution().getScaledHeight(), -16776961);
            }
            String text = "DIDNT ENABLE FINAL GRANDPA";
            float f2 = (float)event.getScaledResolution().getScaledWidth() / 2.0f - font.getWidth(text) / 2.0f;
            float f3 = (float)event.getScaledResolution().getScaledHeight() / 2.0f;
            font.getClass();
            font.drawString(text, f2, f3 - 9.0f / 2.0f, 0xFFFFFF);
        }
    }
}

