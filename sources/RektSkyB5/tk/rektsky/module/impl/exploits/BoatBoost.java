/*
 * Decompiled with CFR 0.152.
 */
package tk.rektsky.module.impl.exploits;

import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S03PacketTimeUpdate;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S09PacketHeldItemChange;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S13PacketDestroyEntities;
import net.minecraft.network.play.server.S14PacketEntity;
import net.minecraft.network.play.server.S18PacketEntityTeleport;
import net.minecraft.network.play.server.S19PacketEntityHeadLook;
import net.minecraft.network.play.server.S1BPacketEntityAttach;
import net.minecraft.network.play.server.S21PacketChunkData;
import net.minecraft.network.play.server.S22PacketMultiBlockChange;
import net.minecraft.network.play.server.S23PacketBlockChange;
import net.minecraft.network.play.server.S26PacketMapChunkBulk;
import net.minecraft.network.play.server.S28PacketEffect;
import net.minecraft.network.play.server.S29PacketSoundEffect;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.network.play.server.S38PacketPlayerListItem;
import net.minecraft.util.Vec3;
import org.greenrobot.eventbus.Subscribe;
import tk.rektsky.Client;
import tk.rektsky.event.impl.PacketReceiveEvent;
import tk.rektsky.event.impl.PacketSentEvent;
import tk.rektsky.event.impl.WorldTickEvent;
import tk.rektsky.module.Category;
import tk.rektsky.module.Module;
import tk.rektsky.module.impl.render.Notification;
import tk.rektsky.module.settings.DoubleSetting;
import tk.rektsky.utils.MovementUtil;
import tk.rektsky.utils.display.ColorUtil;

public class BoatBoost
extends Module {
    public int leaveTicks = 0;
    public Vec3 lastReportedPosition = new Vec3(0.0, 0.0, 0.0);
    public int tick = 0;
    public int packets = 0;
    public boolean riding = false;
    public int startSneak = -1;
    public DoubleSetting speed = new DoubleSetting("Speed", 0.5, 8.0, 4.0);
    public DoubleSetting timer = new DoubleSetting("Timer", 0.1, 10.0, 1.0);

    public BoatBoost() {
        super("BoatBoost", "Make you go brr", Category.EXPLOIT);
    }

    @Override
    public void onEnable() {
        this.leaveTicks = 99999;
        this.riding = this.mc.thePlayer.isRiding();
        if (this.riding) {
            this.mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(this.mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
            this.startSneak = 1;
        }
        Client.addClientChat("Right click on a boat to start flying");
        this.startSneak = -1;
    }

    @Override
    public void onDisable() {
        this.mc.timer.timerSpeed = 1.0;
        this.mc.thePlayer.motionX = 0.0;
        this.mc.thePlayer.motionY = 0.0;
        this.mc.thePlayer.motionZ = 0.0;
    }

    @Subscribe
    public void tick(WorldTickEvent event) {
        --this.startSneak;
        if (this.startSneak == 0) {
            this.mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(this.mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
        }
        if (this.mc.thePlayer.isRiding() || this.riding) {
            this.leaveTicks = 0;
            return;
        }
        ++this.leaveTicks;
        if (this.leaveTicks == 1) {
            this.mc.thePlayer.setPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY + 0.7, this.mc.thePlayer.posZ);
            Client.notify(new Notification.PopupMessage("BoatBoost", "You can fly for " + (double)Math.round(40.0 / (20.0 * this.timer.getValue()) * 10.0) / 10.0 + " seconds now", ColorUtil.NotificationColors.GREEN, 40));
        } else {
            if (this.leaveTicks < 40) {
                this.mc.timer.timerSpeed = this.timer.getValue();
                this.mc.thePlayer.motionY = 0.0;
                if (!MovementUtil.isMoving()) {
                    this.mc.thePlayer.motionX = 0.0;
                    this.mc.thePlayer.motionZ = 0.0;
                }
                MovementUtil.strafe(this.speed.getValue());
                if (this.mc.gameSettings.keyBindJump.isKeyDown()) {
                    this.mc.thePlayer.motionY = this.speed.getValue() / (double)1.4f;
                    MovementUtil.strafe(this.speed.getValue() / (double)1.4f);
                } else if (this.mc.thePlayer.isSneaking()) {
                    this.mc.thePlayer.motionY = -this.speed.getValue().doubleValue() / (double)1.4f;
                    MovementUtil.strafe(this.speed.getValue() / (double)1.4f);
                }
            }
            if (this.leaveTicks == 40) {
                this.mc.thePlayer.motionX = 0.0;
                this.mc.thePlayer.motionY = 0.0;
                this.mc.thePlayer.motionZ = 0.0;
                this.mc.timer.timerSpeed = 1.0;
            }
        }
    }

    @Subscribe
    public void packet(PacketSentEvent event) {
        if (event.getPacket() instanceof C03PacketPlayer && this.leaveTicks < 40 && this.leaveTicks != 1 && this.mc.thePlayer.fallDistance > 3.0f) {
            ((C03PacketPlayer)event.getPacket()).onGround = true;
            this.mc.thePlayer.fallDistance = 0.0f;
        }
    }

    @Subscribe
    public void packetReceiveEvent(PacketReceiveEvent event) {
        if (event.getPacket().getClass().getSimpleName().startsWith("C")) {
            return;
        }
        if (event.getPacket() instanceof S12PacketEntityVelocity) {
            return;
        }
        if (event.getPacket() instanceof S14PacketEntity) {
            return;
        }
        if (event.getPacket() instanceof S19PacketEntityHeadLook) {
            return;
        }
        if (event.getPacket() instanceof S09PacketHeldItemChange) {
            return;
        }
        if (event.getPacket() instanceof S23PacketBlockChange) {
            return;
        }
        if (event.getPacket() instanceof S03PacketTimeUpdate) {
            return;
        }
        if (event.getPacket() instanceof S32PacketConfirmTransaction) {
            return;
        }
        if (event.getPacket() instanceof S18PacketEntityTeleport) {
            return;
        }
        if (event.getPacket() instanceof S00PacketKeepAlive) {
            return;
        }
        if (event.getPacket() instanceof S29PacketSoundEffect) {
            return;
        }
        if (event.getPacket() instanceof S21PacketChunkData) {
            return;
        }
        if (event.getPacket() instanceof S26PacketMapChunkBulk) {
            return;
        }
        if (event.getPacket() instanceof S22PacketMultiBlockChange) {
            return;
        }
        if (event.getPacket() instanceof S28PacketEffect) {
            return;
        }
        if (event.getPacket() instanceof S38PacketPlayerListItem) {
            return;
        }
        if (event.getPacket() instanceof S13PacketDestroyEntities) {
            return;
        }
        if (event.getPacket() instanceof S08PacketPlayerPosLook && this.leaveTicks > 10) {
            this.leaveTicks = 99999;
            this.mc.timer.timerSpeed = 1.0;
        }
        if (event.getPacket() instanceof S1BPacketEntityAttach) {
            if (((S1BPacketEntityAttach)event.getPacket()).getEntityId() != this.mc.thePlayer.getEntityId()) {
                return;
            }
            event.setCanceled(true);
            boolean bl = this.riding = !this.riding;
            if (this.riding) {
                this.mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(this.mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                this.startSneak = 1;
            }
        }
    }
}

