/*
 * Decompiled with CFR 0.152.
 */
package jaco.mp3.a;

import jaco.mp3.a.c_0;
import java.math.BigDecimal;

final class y {
    private float[] a;
    private float[] b;
    private float[] c;
    private int d;
    private float[] e;
    private int f;
    private float g;
    private float[] h;
    private float[] i = new float[32];
    private static final float j = (float)(1.0 / (2.0 * Math.cos(0.04908738521234052)));
    private static final float k = (float)(1.0 / (2.0 * Math.cos(0.14726215563702155)));
    private static final float l = (float)(1.0 / (2.0 * Math.cos(0.2454369260617026)));
    private static final float m = (float)(1.0 / (2.0 * Math.cos(0.3436116964863836)));
    private static final float n = (float)(1.0 / (2.0 * Math.cos(0.44178646691106466)));
    private static final float o = (float)(1.0 / (2.0 * Math.cos(0.5399612373357456)));
    private static final float p = (float)(1.0 / (2.0 * Math.cos(0.6381360077604268)));
    private static final float q = (float)(1.0 / (2.0 * Math.cos(0.7363107781851077)));
    private static final float r = (float)(1.0 / (2.0 * Math.cos(0.8344855486097889)));
    private static final float s = (float)(1.0 / (2.0 * Math.cos(0.9326603190344698)));
    private static final float t = (float)(1.0 / (2.0 * Math.cos(1.030835089459151)));
    private static final float u = (float)(1.0 / (2.0 * Math.cos(1.1290098598838318)));
    private static final float v = (float)(1.0 / (2.0 * Math.cos(1.227184630308513)));
    private static final float w = (float)(1.0 / (2.0 * Math.cos(1.325359400733194)));
    private static final float x = (float)(1.0 / (2.0 * Math.cos(1.423534171157875)));
    private static final float y = (float)(1.0 / (2.0 * Math.cos(1.521708941582556)));
    private static final float z = (float)(1.0 / (2.0 * Math.cos(0.09817477042468103)));
    private static final float A = (float)(1.0 / (2.0 * Math.cos(0.2945243112740431)));
    private static final float B = (float)(1.0 / (2.0 * Math.cos(0.4908738521234052)));
    private static final float C = (float)(1.0 / (2.0 * Math.cos(0.6872233929727672)));
    private static final float D = (float)(1.0 / (2.0 * Math.cos(0.8835729338221293)));
    private static final float E = (float)(1.0 / (2.0 * Math.cos(1.0799224746714913)));
    private static final float F = (float)(1.0 / (2.0 * Math.cos(1.2762720155208536)));
    private static final float G = (float)(1.0 / (2.0 * Math.cos(1.4726215563702154)));
    private static final float H = (float)(1.0 / (2.0 * Math.cos(0.19634954084936207)));
    private static final float I = (float)(1.0 / (2.0 * Math.cos(0.5890486225480862)));
    private static final float J = (float)(1.0 / (2.0 * Math.cos(0.9817477042468103)));
    private static final float K = (float)(1.0 / (2.0 * Math.cos(1.3744467859455345)));
    private static final float L = (float)(1.0 / (2.0 * Math.cos(0.39269908169872414)));
    private static final float M = (float)(1.0 / (2.0 * Math.cos(1.1780972450961724)));
    private static final float N = (float)(1.0 / (2.0 * Math.cos(0.7853981633974483)));
    private static float[] O = null;
    private static float[][] P = null;

    public y(int n2, float f2) {
        if (O == null) {
            O = jaco.mp3.a.y.b();
            P = jaco.mp3.a.y.a(O, 16);
        }
        this.a = new float[512];
        this.b = new float[512];
        this.e = new float[32];
        this.f = n2;
        this.g = f2;
        this.b(this.h);
        this.a();
    }

    private void b(float[] fArray) {
        this.h = fArray;
        if (this.h == null) {
            this.h = new float[32];
            int n2 = 0;
            while (n2 < 32) {
                this.h[n2] = 1.0f;
                ++n2;
            }
        }
        if (this.h.length < 32) {
            throw new IllegalArgumentException("eq0");
        }
    }

    private void a() {
        int n2 = 0;
        while (n2 < 512) {
            this.b[n2] = 0.0f;
            this.a[n2] = 0.0f;
            ++n2;
        }
        n2 = 0;
        while (n2 < 32) {
            this.e[n2] = 0.0f;
            ++n2;
        }
        this.c = this.a;
        this.d = 15;
    }

    public final void a(float f2, int n2) {
        this.e[n2] = this.h[n2] * f2;
    }

    public final void a(float[] fArray) {
        int n2 = 31;
        while (n2 >= 0) {
            this.e[n2] = fArray[n2] * this.h[n2];
            --n2;
        }
    }

    public final void a(c_0 c_02) {
        y y2 = this;
        float[] fArray = y2.e;
        float f2 = y2.e[0];
        float f3 = fArray[1];
        float f4 = fArray[2];
        float f5 = fArray[3];
        float f6 = fArray[4];
        float f7 = fArray[5];
        float f8 = fArray[6];
        float f9 = fArray[7];
        float f10 = fArray[8];
        float f11 = fArray[9];
        float f12 = fArray[10];
        float f13 = fArray[11];
        float f14 = fArray[12];
        float f15 = fArray[13];
        float f16 = fArray[14];
        float f17 = fArray[15];
        float f18 = fArray[16];
        float f19 = fArray[17];
        float f20 = fArray[18];
        float f21 = fArray[19];
        float f22 = fArray[20];
        float f23 = fArray[21];
        float f24 = fArray[22];
        float f25 = fArray[23];
        float f26 = fArray[24];
        float f27 = fArray[25];
        float f28 = fArray[26];
        float f29 = fArray[27];
        float f30 = fArray[28];
        float f31 = fArray[29];
        float f32 = fArray[30];
        float f33 = fArray[31];
        float f34 = f2 + f33;
        float f35 = f3 + f32;
        float f36 = f4 + f31;
        float f37 = f5 + f30;
        float f38 = f6 + f29;
        float f39 = f7 + f28;
        float f40 = f8 + f27;
        float f41 = f9 + f26;
        float f42 = f10 + f25;
        float f43 = f11 + f24;
        float f44 = f12 + f23;
        float f45 = f13 + f22;
        float f46 = f14 + f21;
        float f47 = f15 + f20;
        float f48 = f16 + f19;
        float f49 = f17 + f18;
        float f50 = f34 + f49;
        float f51 = f35 + f48;
        float f52 = f36 + f47;
        float f53 = f37 + f46;
        float f54 = f38 + f45;
        float f55 = f39 + f44;
        float f56 = f40 + f43;
        float f57 = f41 + f42;
        float f58 = (f34 - f49) * z;
        float f59 = (f35 - f48) * A;
        float f60 = (f36 - f47) * B;
        float f61 = (f37 - f46) * C;
        float f62 = (f38 - f45) * D;
        float f63 = (f39 - f44) * E;
        float f64 = (f40 - f43) * F;
        float f65 = (f41 - f42) * G;
        f34 = f50 + f57;
        f35 = f51 + f56;
        f36 = f52 + f55;
        f37 = f53 + f54;
        f38 = (f50 - f57) * H;
        f39 = (f51 - f56) * I;
        f40 = (f52 - f55) * J;
        f41 = (f53 - f54) * K;
        f42 = f58 + f65;
        f43 = f59 + f64;
        f44 = f60 + f63;
        f45 = f61 + f62;
        f46 = (f58 - f65) * H;
        f47 = (f59 - f64) * I;
        f48 = (f60 - f63) * J;
        f49 = (f61 - f62) * K;
        f50 = f34 + f37;
        f51 = f35 + f36;
        f52 = (f34 - f37) * L;
        f53 = (f35 - f36) * M;
        f54 = f38 + f41;
        f55 = f39 + f40;
        f56 = (f38 - f41) * L;
        f57 = (f39 - f40) * M;
        f58 = f42 + f45;
        f59 = f43 + f44;
        f60 = (f42 - f45) * L;
        f61 = (f43 - f44) * M;
        f62 = f46 + f49;
        f63 = f47 + f48;
        f64 = (f46 - f49) * L;
        f65 = (f47 - f48) * M;
        f34 = f50 + f51;
        f35 = (f50 - f51) * N;
        f36 = f52 + f53;
        f37 = (f52 - f53) * N;
        f38 = f54 + f55;
        f39 = (f54 - f55) * N;
        f40 = f56 + f57;
        f41 = (f56 - f57) * N;
        f42 = f58 + f59;
        f43 = (f58 - f59) * N;
        f44 = f60 + f61;
        f45 = (f60 - f61) * N;
        f46 = f62 + f63;
        f47 = (f62 - f63) * N;
        f48 = f64 + f65;
        f49 = (f64 - f65) * N;
        float f66 = f41;
        float f67 = f66 + f39;
        float f68 = -f67 - f40;
        float f69 = -f40 - f66 - f38;
        float f70 = f49;
        float f71 = f70 + f45;
        float f72 = f71 + f47;
        float f73 = f70 + f47 + f43;
        float f74 = -f73 - f48;
        float f75 = -f48 - f70 - f44 - f45;
        float f76 = f75 - f47;
        float f77 = -f48 - f70 - f46 - f42;
        float f78 = f75 - f46;
        float f79 = -f34;
        float f80 = f35;
        float f81 = f37;
        float f82 = -f81 - f36;
        f34 = (f2 - f33) * j;
        f35 = (f3 - f32) * k;
        f36 = (f4 - f31) * l;
        f37 = (f5 - f30) * m;
        f38 = (f6 - f29) * n;
        f39 = (f7 - f28) * o;
        f40 = (f8 - f27) * p;
        f41 = (f9 - f26) * q;
        f42 = (f10 - f25) * r;
        f43 = (f11 - f24) * s;
        f44 = (f12 - f23) * t;
        f45 = (f13 - f22) * u;
        f46 = (f14 - f21) * v;
        f47 = (f15 - f20) * w;
        f48 = (f16 - f19) * x;
        f49 = (f17 - f18) * y;
        f50 = f34 + f49;
        f51 = f35 + f48;
        f52 = f36 + f47;
        f53 = f37 + f46;
        f54 = f38 + f45;
        f55 = f39 + f44;
        f56 = f40 + f43;
        f57 = f41 + f42;
        f58 = (f34 - f49) * z;
        f59 = (f35 - f48) * A;
        f60 = (f36 - f47) * B;
        f61 = (f37 - f46) * C;
        f62 = (f38 - f45) * D;
        f63 = (f39 - f44) * E;
        f64 = (f40 - f43) * F;
        f65 = (f41 - f42) * G;
        f34 = f50 + f57;
        f35 = f51 + f56;
        f36 = f52 + f55;
        f37 = f53 + f54;
        f38 = (f50 - f57) * H;
        f39 = (f51 - f56) * I;
        f40 = (f52 - f55) * J;
        f41 = (f53 - f54) * K;
        f42 = f58 + f65;
        f43 = f59 + f64;
        f44 = f60 + f63;
        f45 = f61 + f62;
        f46 = (f58 - f65) * H;
        f47 = (f59 - f64) * I;
        f48 = (f60 - f63) * J;
        f49 = (f61 - f62) * K;
        f50 = f34 + f37;
        f51 = f35 + f36;
        f52 = (f34 - f37) * L;
        f53 = (f35 - f36) * M;
        f54 = f38 + f41;
        f55 = f39 + f40;
        f56 = (f38 - f41) * L;
        f57 = (f39 - f40) * M;
        f58 = f42 + f45;
        f59 = f43 + f44;
        f60 = (f42 - f45) * L;
        f61 = (f43 - f44) * M;
        f62 = f46 + f49;
        f63 = f47 + f48;
        f64 = (f46 - f49) * L;
        f65 = (f47 - f48) * M;
        f34 = f50 + f51;
        f35 = (f50 - f51) * N;
        f36 = f52 + f53;
        f37 = (f52 - f53) * N;
        f38 = f54 + f55;
        f39 = (f54 - f55) * N;
        f40 = f56 + f57;
        f41 = (f56 - f57) * N;
        f42 = f58 + f59;
        f43 = (f58 - f59) * N;
        f44 = f60 + f61;
        f45 = (f60 - f61) * N;
        f46 = f62 + f63;
        f47 = (f62 - f63) * N;
        f48 = f64 + f65;
        f9 = f49 = (f64 - f65) * N;
        f8 = f49 + f41;
        f7 = f8 + f45;
        f4 = f7 + f39 + f47;
        f6 = f9 + f45 + f37;
        f5 = f6 + f47;
        f75 = f47 + f9 + f43;
        f2 = f75 + f35;
        f10 = -f2 - f48;
        f3 = f75 + f39 + f41;
        f11 = -f3 - f40 - f48;
        f75 = -f44 - f45 - f48 - f9;
        f13 = f75 - f47 - f36 - f37;
        f12 = f75 - f47 - f39 - f40 - f41;
        f14 = f75 - f46 - f36 - f37;
        float f83 = f38 + f40 + f41;
        f15 = f75 - f46 - f83;
        f75 = -f42 - f46 - f48 - f9;
        f17 = f75 - f34;
        f16 = f75 - f83;
        float[] fArray2 = y2.c;
        int n2 = y2.d;
        fArray2[n2 + 0] = f80;
        fArray2[n2 + 16] = f2;
        fArray2[n2 + 32] = f73;
        fArray2[n2 + 48] = f3;
        fArray2[n2 + 64] = f67;
        fArray2[n2 + 80] = f4;
        fArray2[n2 + 96] = f72;
        fArray2[n2 + 112] = f5;
        fArray2[n2 + 128] = f81;
        fArray2[n2 + 144] = f6;
        fArray2[n2 + 160] = f71;
        fArray2[n2 + 176] = f7;
        fArray2[n2 + 192] = f66;
        fArray2[n2 + 208] = f8;
        fArray2[n2 + 224] = f70;
        fArray2[n2 + 240] = f9;
        fArray2[n2 + 256] = 0.0f;
        fArray2[n2 + 272] = -f9;
        fArray2[n2 + 288] = -f70;
        fArray2[n2 + 304] = -f8;
        fArray2[n2 + 320] = -f66;
        fArray2[n2 + 336] = -f7;
        fArray2[n2 + 352] = -f71;
        fArray2[n2 + 368] = -f6;
        fArray2[n2 + 384] = -f81;
        fArray2[n2 + 400] = -f5;
        fArray2[n2 + 416] = -f72;
        fArray2[n2 + 432] = -f4;
        fArray2[n2 + 448] = -f67;
        fArray2[n2 + 464] = -f3;
        fArray2[n2 + 480] = -f73;
        fArray2[n2 + 496] = -f2;
        float[] fArray3 = y2.c == y2.a ? y2.b : y2.a;
        fArray2 = fArray3;
        fArray3[n2 + 0] = -f80;
        fArray2[n2 + 16] = f10;
        fArray2[n2 + 32] = f74;
        fArray2[n2 + 48] = f11;
        fArray2[n2 + 64] = f68;
        fArray2[n2 + 80] = f12;
        fArray2[n2 + 96] = f76;
        fArray2[n2 + 112] = f13;
        fArray2[n2 + 128] = f82;
        fArray2[n2 + 144] = f14;
        fArray2[n2 + 160] = f78;
        fArray2[n2 + 176] = f15;
        fArray2[n2 + 192] = f69;
        fArray2[n2 + 208] = f16;
        fArray2[n2 + 224] = f77;
        fArray2[n2 + 240] = f17;
        fArray2[n2 + 256] = f79;
        fArray2[n2 + 272] = f17;
        fArray2[n2 + 288] = f77;
        fArray2[n2 + 304] = f16;
        fArray2[n2 + 320] = f69;
        fArray2[n2 + 336] = f15;
        fArray2[n2 + 352] = f78;
        fArray2[n2 + 368] = f14;
        fArray2[n2 + 384] = f82;
        fArray2[n2 + 400] = f13;
        fArray2[n2 + 416] = f76;
        fArray2[n2 + 432] = f12;
        fArray2[n2 + 448] = f68;
        fArray2[n2 + 464] = f11;
        fArray2[n2 + 480] = f74;
        fArray2[n2 + 496] = f10;
        c_0 c_03 = c_02;
        y2 = this;
        switch (y2.d) {
            case 0: {
                y y3 = y2;
                float[] fArray4 = y3.c;
                float[] fArray5 = y3.i;
                int n3 = 0;
                int n4 = 0;
                while (n4 < 32) {
                    float[] fArray6 = P[n4];
                    fArray5[n4] = f72 = (fArray4[n3 + 0] * fArray6[0] + fArray4[n3 + 15] * fArray6[1] + fArray4[n3 + 14] * fArray6[2] + fArray4[n3 + 13] * fArray6[3] + fArray4[n3 + 12] * fArray6[4] + fArray4[n3 + 11] * fArray6[5] + fArray4[n3 + 10] * fArray6[6] + fArray4[n3 + 9] * fArray6[7] + fArray4[n3 + 8] * fArray6[8] + fArray4[n3 + 7] * fArray6[9] + fArray4[n3 + 6] * fArray6[10] + fArray4[n3 + 5] * fArray6[11] + fArray4[n3 + 4] * fArray6[12] + fArray4[n3 + 3] * fArray6[13] + fArray4[n3 + 2] * fArray6[14] + fArray4[n3 + 1] * fArray6[15]) * y3.g;
                    n3 += 16;
                    ++n4;
                }
                break;
            }
            case 1: {
                y y4 = y2;
                float[] fArray7 = y4.c;
                float[] fArray8 = y4.i;
                int n5 = 0;
                int n6 = 0;
                while (n6 < 32) {
                    float[] fArray9 = P[n6];
                    fArray8[n6] = f5 = (fArray7[n5 + 1] * fArray9[0] + fArray7[n5 + 0] * fArray9[1] + fArray7[n5 + 15] * fArray9[2] + fArray7[n5 + 14] * fArray9[3] + fArray7[n5 + 13] * fArray9[4] + fArray7[n5 + 12] * fArray9[5] + fArray7[n5 + 11] * fArray9[6] + fArray7[n5 + 10] * fArray9[7] + fArray7[n5 + 9] * fArray9[8] + fArray7[n5 + 8] * fArray9[9] + fArray7[n5 + 7] * fArray9[10] + fArray7[n5 + 6] * fArray9[11] + fArray7[n5 + 5] * fArray9[12] + fArray7[n5 + 4] * fArray9[13] + fArray7[n5 + 3] * fArray9[14] + fArray7[n5 + 2] * fArray9[15]) * y4.g;
                    n5 += 16;
                    ++n6;
                }
                break;
            }
            case 2: {
                y y5 = y2;
                float[] fArray10 = y5.c;
                float[] fArray11 = y5.i;
                int n7 = 0;
                int n8 = 0;
                while (n8 < 32) {
                    float[] fArray12 = P[n8];
                    fArray11[n8] = f5 = (fArray10[n7 + 2] * fArray12[0] + fArray10[n7 + 1] * fArray12[1] + fArray10[n7 + 0] * fArray12[2] + fArray10[n7 + 15] * fArray12[3] + fArray10[n7 + 14] * fArray12[4] + fArray10[n7 + 13] * fArray12[5] + fArray10[n7 + 12] * fArray12[6] + fArray10[n7 + 11] * fArray12[7] + fArray10[n7 + 10] * fArray12[8] + fArray10[n7 + 9] * fArray12[9] + fArray10[n7 + 8] * fArray12[10] + fArray10[n7 + 7] * fArray12[11] + fArray10[n7 + 6] * fArray12[12] + fArray10[n7 + 5] * fArray12[13] + fArray10[n7 + 4] * fArray12[14] + fArray10[n7 + 3] * fArray12[15]) * y5.g;
                    n7 += 16;
                    ++n8;
                }
                break;
            }
            case 3: {
                y y6 = y2;
                float[] fArray13 = y6.c;
                float[] fArray14 = y6.i;
                int n9 = 0;
                int n10 = 0;
                while (n10 < 32) {
                    float[] fArray15 = P[n10];
                    fArray14[n10] = f81 = (fArray13[n9 + 3] * fArray15[0] + fArray13[n9 + 2] * fArray15[1] + fArray13[n9 + 1] * fArray15[2] + fArray13[n9 + 0] * fArray15[3] + fArray13[n9 + 15] * fArray15[4] + fArray13[n9 + 14] * fArray15[5] + fArray13[n9 + 13] * fArray15[6] + fArray13[n9 + 12] * fArray15[7] + fArray13[n9 + 11] * fArray15[8] + fArray13[n9 + 10] * fArray15[9] + fArray13[n9 + 9] * fArray15[10] + fArray13[n9 + 8] * fArray15[11] + fArray13[n9 + 7] * fArray15[12] + fArray13[n9 + 6] * fArray15[13] + fArray13[n9 + 5] * fArray15[14] + fArray13[n9 + 4] * fArray15[15]) * y6.g;
                    n9 += 16;
                    ++n10;
                }
                break;
            }
            case 4: {
                y y7 = y2;
                float[] fArray16 = y7.c;
                float[] fArray17 = y7.i;
                int n11 = 0;
                int n12 = 0;
                while (n12 < 32) {
                    float[] fArray18 = P[n12];
                    fArray17[n12] = f5 = (fArray16[n11 + 4] * fArray18[0] + fArray16[n11 + 3] * fArray18[1] + fArray16[n11 + 2] * fArray18[2] + fArray16[n11 + 1] * fArray18[3] + fArray16[n11 + 0] * fArray18[4] + fArray16[n11 + 15] * fArray18[5] + fArray16[n11 + 14] * fArray18[6] + fArray16[n11 + 13] * fArray18[7] + fArray16[n11 + 12] * fArray18[8] + fArray16[n11 + 11] * fArray18[9] + fArray16[n11 + 10] * fArray18[10] + fArray16[n11 + 9] * fArray18[11] + fArray16[n11 + 8] * fArray18[12] + fArray16[n11 + 7] * fArray18[13] + fArray16[n11 + 6] * fArray18[14] + fArray16[n11 + 5] * fArray18[15]) * y7.g;
                    n11 += 16;
                    ++n12;
                }
                break;
            }
            case 5: {
                y y8 = y2;
                float[] fArray19 = y8.c;
                float[] fArray20 = y8.i;
                int n13 = 0;
                int n14 = 0;
                while (n14 < 32) {
                    float[] fArray21 = P[n14];
                    fArray20[n14] = f5 = (fArray19[n13 + 5] * fArray21[0] + fArray19[n13 + 4] * fArray21[1] + fArray19[n13 + 3] * fArray21[2] + fArray19[n13 + 2] * fArray21[3] + fArray19[n13 + 1] * fArray21[4] + fArray19[n13 + 0] * fArray21[5] + fArray19[n13 + 15] * fArray21[6] + fArray19[n13 + 14] * fArray21[7] + fArray19[n13 + 13] * fArray21[8] + fArray19[n13 + 12] * fArray21[9] + fArray19[n13 + 11] * fArray21[10] + fArray19[n13 + 10] * fArray21[11] + fArray19[n13 + 9] * fArray21[12] + fArray19[n13 + 8] * fArray21[13] + fArray19[n13 + 7] * fArray21[14] + fArray19[n13 + 6] * fArray21[15]) * y8.g;
                    n13 += 16;
                    ++n14;
                }
                break;
            }
            case 6: {
                y y9 = y2;
                float[] fArray22 = y9.c;
                float[] fArray23 = y9.i;
                int n15 = 0;
                int n16 = 0;
                while (n16 < 32) {
                    float[] fArray24 = P[n16];
                    fArray23[n16] = f5 = (fArray22[n15 + 6] * fArray24[0] + fArray22[n15 + 5] * fArray24[1] + fArray22[n15 + 4] * fArray24[2] + fArray22[n15 + 3] * fArray24[3] + fArray22[n15 + 2] * fArray24[4] + fArray22[n15 + 1] * fArray24[5] + fArray22[n15 + 0] * fArray24[6] + fArray22[n15 + 15] * fArray24[7] + fArray22[n15 + 14] * fArray24[8] + fArray22[n15 + 13] * fArray24[9] + fArray22[n15 + 12] * fArray24[10] + fArray22[n15 + 11] * fArray24[11] + fArray22[n15 + 10] * fArray24[12] + fArray22[n15 + 9] * fArray24[13] + fArray22[n15 + 8] * fArray24[14] + fArray22[n15 + 7] * fArray24[15]) * y9.g;
                    n15 += 16;
                    ++n16;
                }
                break;
            }
            case 7: {
                y y10 = y2;
                float[] fArray25 = y10.c;
                float[] fArray26 = y10.i;
                int n17 = 0;
                int n18 = 0;
                while (n18 < 32) {
                    float[] fArray27 = P[n18];
                    fArray26[n18] = f5 = (fArray25[n17 + 7] * fArray27[0] + fArray25[n17 + 6] * fArray27[1] + fArray25[n17 + 5] * fArray27[2] + fArray25[n17 + 4] * fArray27[3] + fArray25[n17 + 3] * fArray27[4] + fArray25[n17 + 2] * fArray27[5] + fArray25[n17 + 1] * fArray27[6] + fArray25[n17 + 0] * fArray27[7] + fArray25[n17 + 15] * fArray27[8] + fArray25[n17 + 14] * fArray27[9] + fArray25[n17 + 13] * fArray27[10] + fArray25[n17 + 12] * fArray27[11] + fArray25[n17 + 11] * fArray27[12] + fArray25[n17 + 10] * fArray27[13] + fArray25[n17 + 9] * fArray27[14] + fArray25[n17 + 8] * fArray27[15]) * y10.g;
                    n17 += 16;
                    ++n18;
                }
                break;
            }
            case 8: {
                y y11 = y2;
                float[] fArray28 = y11.c;
                float[] fArray29 = y11.i;
                int n19 = 0;
                int n20 = 0;
                while (n20 < 32) {
                    float[] fArray30 = P[n20];
                    fArray29[n20] = f5 = (fArray28[n19 + 8] * fArray30[0] + fArray28[n19 + 7] * fArray30[1] + fArray28[n19 + 6] * fArray30[2] + fArray28[n19 + 5] * fArray30[3] + fArray28[n19 + 4] * fArray30[4] + fArray28[n19 + 3] * fArray30[5] + fArray28[n19 + 2] * fArray30[6] + fArray28[n19 + 1] * fArray30[7] + fArray28[n19 + 0] * fArray30[8] + fArray28[n19 + 15] * fArray30[9] + fArray28[n19 + 14] * fArray30[10] + fArray28[n19 + 13] * fArray30[11] + fArray28[n19 + 12] * fArray30[12] + fArray28[n19 + 11] * fArray30[13] + fArray28[n19 + 10] * fArray30[14] + fArray28[n19 + 9] * fArray30[15]) * y11.g;
                    n19 += 16;
                    ++n20;
                }
                break;
            }
            case 9: {
                y y12 = y2;
                float[] fArray31 = y12.c;
                float[] fArray32 = y12.i;
                int n21 = 0;
                int n22 = 0;
                while (n22 < 32) {
                    float[] fArray33 = P[n22];
                    fArray32[n22] = f5 = (fArray31[n21 + 9] * fArray33[0] + fArray31[n21 + 8] * fArray33[1] + fArray31[n21 + 7] * fArray33[2] + fArray31[n21 + 6] * fArray33[3] + fArray31[n21 + 5] * fArray33[4] + fArray31[n21 + 4] * fArray33[5] + fArray31[n21 + 3] * fArray33[6] + fArray31[n21 + 2] * fArray33[7] + fArray31[n21 + 1] * fArray33[8] + fArray31[n21 + 0] * fArray33[9] + fArray31[n21 + 15] * fArray33[10] + fArray31[n21 + 14] * fArray33[11] + fArray31[n21 + 13] * fArray33[12] + fArray31[n21 + 12] * fArray33[13] + fArray31[n21 + 11] * fArray33[14] + fArray31[n21 + 10] * fArray33[15]) * y12.g;
                    n21 += 16;
                    ++n22;
                }
                break;
            }
            case 10: {
                y y13 = y2;
                float[] fArray34 = y13.c;
                float[] fArray35 = y13.i;
                int n23 = 0;
                int n24 = 0;
                while (n24 < 32) {
                    float[] fArray36 = P[n24];
                    fArray35[n24] = f5 = (fArray34[n23 + 10] * fArray36[0] + fArray34[n23 + 9] * fArray36[1] + fArray34[n23 + 8] * fArray36[2] + fArray34[n23 + 7] * fArray36[3] + fArray34[n23 + 6] * fArray36[4] + fArray34[n23 + 5] * fArray36[5] + fArray34[n23 + 4] * fArray36[6] + fArray34[n23 + 3] * fArray36[7] + fArray34[n23 + 2] * fArray36[8] + fArray34[n23 + 1] * fArray36[9] + fArray34[n23 + 0] * fArray36[10] + fArray34[n23 + 15] * fArray36[11] + fArray34[n23 + 14] * fArray36[12] + fArray34[n23 + 13] * fArray36[13] + fArray34[n23 + 12] * fArray36[14] + fArray34[n23 + 11] * fArray36[15]) * y13.g;
                    n23 += 16;
                    ++n24;
                }
                break;
            }
            case 11: {
                y y14 = y2;
                float[] fArray37 = y14.c;
                float[] fArray38 = y14.i;
                int n25 = 0;
                int n26 = 0;
                while (n26 < 32) {
                    float[] fArray39 = P[n26];
                    fArray38[n26] = f5 = (fArray37[n25 + 11] * fArray39[0] + fArray37[n25 + 10] * fArray39[1] + fArray37[n25 + 9] * fArray39[2] + fArray37[n25 + 8] * fArray39[3] + fArray37[n25 + 7] * fArray39[4] + fArray37[n25 + 6] * fArray39[5] + fArray37[n25 + 5] * fArray39[6] + fArray37[n25 + 4] * fArray39[7] + fArray37[n25 + 3] * fArray39[8] + fArray37[n25 + 2] * fArray39[9] + fArray37[n25 + 1] * fArray39[10] + fArray37[n25 + 0] * fArray39[11] + fArray37[n25 + 15] * fArray39[12] + fArray37[n25 + 14] * fArray39[13] + fArray37[n25 + 13] * fArray39[14] + fArray37[n25 + 12] * fArray39[15]) * y14.g;
                    n25 += 16;
                    ++n26;
                }
                break;
            }
            case 12: {
                y y15 = y2;
                float[] fArray40 = y15.c;
                float[] fArray41 = y15.i;
                int n27 = 0;
                int n28 = 0;
                while (n28 < 32) {
                    float[] fArray42 = P[n28];
                    fArray41[n28] = f5 = (fArray40[n27 + 12] * fArray42[0] + fArray40[n27 + 11] * fArray42[1] + fArray40[n27 + 10] * fArray42[2] + fArray40[n27 + 9] * fArray42[3] + fArray40[n27 + 8] * fArray42[4] + fArray40[n27 + 7] * fArray42[5] + fArray40[n27 + 6] * fArray42[6] + fArray40[n27 + 5] * fArray42[7] + fArray40[n27 + 4] * fArray42[8] + fArray40[n27 + 3] * fArray42[9] + fArray40[n27 + 2] * fArray42[10] + fArray40[n27 + 1] * fArray42[11] + fArray40[n27 + 0] * fArray42[12] + fArray40[n27 + 15] * fArray42[13] + fArray40[n27 + 14] * fArray42[14] + fArray40[n27 + 13] * fArray42[15]) * y15.g;
                    n27 += 16;
                    ++n28;
                }
                break;
            }
            case 13: {
                y y16 = y2;
                float[] fArray43 = y16.c;
                float[] fArray44 = y16.i;
                int n29 = 0;
                int n30 = 0;
                while (n30 < 32) {
                    float[] fArray45 = P[n30];
                    fArray44[n30] = f5 = (fArray43[n29 + 13] * fArray45[0] + fArray43[n29 + 12] * fArray45[1] + fArray43[n29 + 11] * fArray45[2] + fArray43[n29 + 10] * fArray45[3] + fArray43[n29 + 9] * fArray45[4] + fArray43[n29 + 8] * fArray45[5] + fArray43[n29 + 7] * fArray45[6] + fArray43[n29 + 6] * fArray45[7] + fArray43[n29 + 5] * fArray45[8] + fArray43[n29 + 4] * fArray45[9] + fArray43[n29 + 3] * fArray45[10] + fArray43[n29 + 2] * fArray45[11] + fArray43[n29 + 1] * fArray45[12] + fArray43[n29 + 0] * fArray45[13] + fArray43[n29 + 15] * fArray45[14] + fArray43[n29 + 14] * fArray45[15]) * y16.g;
                    n29 += 16;
                    ++n30;
                }
                break;
            }
            case 14: {
                y y17 = y2;
                float[] fArray46 = y17.c;
                float[] fArray47 = y17.i;
                int n31 = 0;
                int n32 = 0;
                while (n32 < 32) {
                    float[] fArray48 = P[n32];
                    fArray47[n32] = f5 = (fArray46[n31 + 14] * fArray48[0] + fArray46[n31 + 13] * fArray48[1] + fArray46[n31 + 12] * fArray48[2] + fArray46[n31 + 11] * fArray48[3] + fArray46[n31 + 10] * fArray48[4] + fArray46[n31 + 9] * fArray48[5] + fArray46[n31 + 8] * fArray48[6] + fArray46[n31 + 7] * fArray48[7] + fArray46[n31 + 6] * fArray48[8] + fArray46[n31 + 5] * fArray48[9] + fArray46[n31 + 4] * fArray48[10] + fArray46[n31 + 3] * fArray48[11] + fArray46[n31 + 2] * fArray48[12] + fArray46[n31 + 1] * fArray48[13] + fArray46[n31 + 0] * fArray48[14] + fArray46[n31 + 15] * fArray48[15]) * y17.g;
                    n31 += 16;
                    ++n32;
                }
                break;
            }
            case 15: {
                y y18 = y2;
                float[] fArray49 = y18.c;
                float[] fArray50 = y18.i;
                int n33 = 0;
                int n34 = 0;
                while (n34 < 32) {
                    float[] fArray51 = P[n34];
                    fArray50[n34] = f72 = (fArray49[n33 + 15] * fArray51[0] + fArray49[n33 + 14] * fArray51[1] + fArray49[n33 + 13] * fArray51[2] + fArray49[n33 + 12] * fArray51[3] + fArray49[n33 + 11] * fArray51[4] + fArray49[n33 + 10] * fArray51[5] + fArray49[n33 + 9] * fArray51[6] + fArray49[n33 + 8] * fArray51[7] + fArray49[n33 + 7] * fArray51[8] + fArray49[n33 + 6] * fArray51[9] + fArray49[n33 + 5] * fArray51[10] + fArray49[n33 + 4] * fArray51[11] + fArray49[n33 + 3] * fArray51[12] + fArray49[n33 + 2] * fArray51[13] + fArray49[n33 + 1] * fArray51[14] + fArray49[n33 + 0] * fArray51[15]) * y18.g;
                    n33 += 16;
                    ++n34;
                }
                break;
            }
        }
        if (c_03 != null) {
            c_03.a(y2.f, y2.i);
        }
        this.d = this.d + 1 & 0xF;
        this.c = this.c == this.a ? this.b : this.a;
        int n35 = 0;
        while (n35 < 32) {
            this.e[n35] = 0.0f;
            ++n35;
        }
    }

    private static float[] b() {
        String[] stringArray = "0,-0.000442504999227821826934814453125,0.0032501220703125,-0.0070037841796875,0.0310821533203125,-0.0786285400390625,0.100311279296875,-0.5720367431640625,1.144989013671875,0.5720367431640625,0.100311279296875,0.0786285400390625,0.0310821533203125,0.0070037841796875,0.0032501220703125,0.000442504999227821826934814453125,-0.0000152590000652708113193511962890625,-0.0004730219952762126922607421875,0.003326416015625,-0.007919312454760074615478515625,0.030517578125,-0.0841827392578125,0.0909271240234375,-0.6002197265625,1.144287109375,0.5438232421875,0.108856201171875,0.07305908203125,0.0314788818359375,0.0061187739484012126922607421875,0.00317382789216935634613037109375,0.00039672901039011776447296142578125,-0.0000152590000652708113193511962890625,-0.0005340580246411263942718505859375,0.00338745093904435634613037109375,-0.0088653564453125,0.02978515625,-0.0897064208984375,0.0806884765625,-0.6282958984375,1.1422119140625,0.5156097412109375,0.1165771484375,0.0675201416015625,0.03173828125,0.0052947998046875,0.0030822749249637126922607421875,0.0003662109957076609134674072265625,-0.0000152590000652708113193511962890625,-0.000579833984375,0.0034332280047237873077392578125,-0.0098419189453125,0.0288848876953125,-0.0951690673828125,0.0695953369140625,-0.656219482421875,1.138763427734375,0.4874725341796875,0.12347412109375,0.0619964599609375,0.0318450927734375,0.004486083984375,0.00299072288908064365386962890625,0.00032043500686995685100555419921875,-0.0000152590000652708113193511962890625,-0.000625610002316534519195556640625,0.00346374488435685634613037109375,-0.0108489990234375,0.027801513671875,-0.1005401611328125,0.0576171875,-0.6839141845703125,1.1339263916015625,0.45947265625,0.12957763671875,0.0565338134765625,0.0318145751953125,0.0037231449969112873077392578125,0.002899169921875,0.0002899169921875,-0.0000152590000652708113193511962890625,-0.0006866459734737873077392578125,0.00347900390625,-0.0118865966796875,0.0265350341796875,-0.1058197021484375,0.0447845458984375,-0.7113189697265625,1.12774658203125,0.4316558837890625,0.1348876953125,0.0511322021484375,0.0316619873046875,0.0030059809796512126922607421875,0.0027923579327762126922607421875,0.0002593990066088736057281494140625,-0.0000152590000652708113193511962890625,-0.000747681013308465480804443359375,0.00347900390625,-0.012939453125,0.02508544921875,-0.1109466552734375,0.0310821533203125,-0.738372802734375,1.1202239990234375,0.404083251953125,0.1394500732421875,0.04583740234375,0.0313873291015625,0.00233459495939314365386962890625,0.00268554710783064365386962890625,0.00024414100334979593753814697265625,-0.000030518000130541622638702392578125,-0.0008087159949354827404022216796875,0.00346374488435685634613037109375,-0.0140228271484375,0.0234222412109375,-0.1159210205078125,0.016510009765625,-0.7650299072265625,1.1113739013671875,0.376800537109375,0.1432647705078125,0.0406341552734375,0.031005859375,0.0016937260515987873077392578125,0.0025787348859012126922607421875,0.000213623003219254314899444580078125,-0.000030518000130541622638702392578125,-0.00088500999845564365386962890625,0.00341796898283064365386962890625,-0.0151214599609375,0.021575927734375,-0.120697021484375,0.00106811500154435634613037109375,-0.7912139892578125,1.1012115478515625,0.3498687744140625,0.1463623046875,0.035552978515625,0.0305328369140625,0.00109863304533064365386962890625,0.0024566650390625,0.00019836399587802588939666748046875,-0.000030518000130541622638702392578125,-0.0009613040019758045673370361328125,0.0033721919171512126922607421875,-0.0162353515625,0.01953125,-0.1252593994140625,-0.015228270553052425384521484375,-0.816864013671875,1.08978271484375,0.3233184814453125,0.148773193359375,0.030609130859375,0.029937744140625,0.0005493159987963736057281494140625,0.0023498539812862873077392578125,0.00016784699982963502407073974609375,-0.000030518000130541622638702392578125,-0.001037598005495965480804443359375,0.0032806401140987873077392578125,-0.0173492431640625,0.0172576904296875,-0.1295623779296875,-0.032379150390625,-0.841949462890625,1.077117919921875,0.297210693359375,0.1504974365234375,0.02581787109375,0.0292816162109375,0.000030518000130541622638702392578125,0.0022430419921875,0.000152588007040321826934814453125,-0.00004577599975164048373699188232421875,-0.001113891950808465480804443359375,0.00317382789216935634613037109375,-0.018463134765625,0.014801025390625,-0.1335906982421875,-0.05035400390625,-0.866363525390625,1.0632171630859375,0.2715911865234375,0.1515960693359375,0.02117919921875,0.028533935546875,-0.000442504999227821826934814453125,0.00212097191251814365386962890625,0.000137328999699093401432037353515625,-0.00004577599975164048373699188232421875,-0.001205443986691534519195556640625,0.00305175804533064365386962890625,-0.0195770263671875,0.012115479446947574615478515625,-0.137298583984375,-0.0691680908203125,-0.8900909423828125,1.04815673828125,0.2465057373046875,0.152069091796875,0.0167083740234375,0.0277252197265625,-0.0008697509765625,0.00201415992341935634613037109375,0.0001220699996338225901126861572265625,-0.00006103499981691129505634307861328125,-0.001296996953897178173065185546875,0.00288391089998185634613037109375,-0.02069091796875,0.0092315673828125,-0.1406707763671875,-0.088775634765625,-0.913055419921875,1.0319366455078125,0.22198486328125,0.1519622802734375,0.012420654296875,0.0268402099609375,-0.0012664790265262126922607421875,0.001907348982058465480804443359375,0.0001068119963747449219226837158203125,-0.00006103499981691129505634307861328125,-0.00138855003751814365386962890625,0.00270080589689314365386962890625,-0.02178955078125,0.006134033203125,-0.1436767578125,-0.109161376953125,-0.9351959228515625,1.014617919921875,0.19805908203125,0.15130615234375,0.0083160400390625,0.025909423828125,-0.001617431989870965480804443359375,0.001785277971066534519195556640625,0.0001068119963747449219226837158203125,-0.0000762940035201609134674072265625,-0.0014801030047237873077392578125,0.0024871830828487873077392578125,-0.022857666015625,0.0028228759765625,-0.1462554931640625,-0.13031005859375,-0.95648193359375,0.996246337890625,0.1747894287109375,0.150115966796875,0.0043945307843387126922607421875,0.024932861328125,-0.00193786597810685634613037109375,0.0016937260515987873077392578125,0.0000915530035854317247867584228515625,-0.0000762940035201609134674072265625,-0.001586913946084678173065185546875,0.00222778297029435634613037109375,-0.0239105224609375,-0.0006866459734737873077392578125,-0.1484222412109375,-0.1522064208984375,-0.9768524169921875,0.9768524169921875,0.1522064208984375,0.1484222412109375,0.0006866459734737873077392578125,0.0239105224609375,-0.00222778297029435634613037109375,0.001586913946084678173065185546875,0.0000762940035201609134674072265625,-0.0000915530035854317247867584228515625,-0.0016937260515987873077392578125,0.00193786597810685634613037109375,-0.024932861328125,-0.0043945307843387126922607421875,-0.150115966796875,-0.1747894287109375,-0.996246337890625,0.95648193359375,0.13031005859375,0.1462554931640625,-0.0028228759765625,0.022857666015625,-0.0024871830828487873077392578125,0.0014801030047237873077392578125,0.0000762940035201609134674072265625,-0.0001068119963747449219226837158203125,-0.001785277971066534519195556640625,0.001617431989870965480804443359375,-0.025909423828125,-0.0083160400390625,-0.15130615234375,-0.19805908203125,-1.014617919921875,0.9351959228515625,0.109161376953125,0.1436767578125,-0.006134033203125,0.02178955078125,-0.00270080589689314365386962890625,0.00138855003751814365386962890625,0.00006103499981691129505634307861328125,-0.0001068119963747449219226837158203125,-0.001907348982058465480804443359375,0.0012664790265262126922607421875,-0.0268402099609375,-0.012420654296875,-0.1519622802734375,-0.22198486328125,-1.0319366455078125,0.913055419921875,0.088775634765625,0.1406707763671875,-0.0092315673828125,0.02069091796875,-0.00288391089998185634613037109375,0.001296996953897178173065185546875,0.00006103499981691129505634307861328125,-0.0001220699996338225901126861572265625,-0.00201415992341935634613037109375,0.0008697509765625,-0.0277252197265625,-0.0167083740234375,-0.152069091796875,-0.2465057373046875,-1.04815673828125,0.8900909423828125,0.0691680908203125,0.137298583984375,-0.012115479446947574615478515625,0.0195770263671875,-0.00305175804533064365386962890625,0.001205443986691534519195556640625,0.00004577599975164048373699188232421875,-0.000137328999699093401432037353515625,-0.00212097191251814365386962890625,0.000442504999227821826934814453125,-0.028533935546875,-0.02117919921875,-0.1515960693359375,-0.2715911865234375,-1.0632171630859375,0.866363525390625,0.05035400390625,0.1335906982421875,-0.014801025390625,0.018463134765625,-0.00317382789216935634613037109375,0.001113891950808465480804443359375,0.00004577599975164048373699188232421875,-0.000152588007040321826934814453125,-0.0022430419921875,-0.000030518000130541622638702392578125,-0.0292816162109375,-0.02581787109375,-0.1504974365234375,-0.297210693359375,-1.077117919921875,0.841949462890625,0.032379150390625,0.1295623779296875,-0.0172576904296875,0.0173492431640625,-0.0032806401140987873077392578125,0.001037598005495965480804443359375,0.000030518000130541622638702392578125,-0.00016784699982963502407073974609375,-0.0023498539812862873077392578125,-0.0005493159987963736057281494140625,-0.029937744140625,-0.030609130859375,-0.148773193359375,-0.3233184814453125,-1.08978271484375,0.816864013671875,0.015228270553052425384521484375,0.1252593994140625,-0.01953125,0.0162353515625,-0.0033721919171512126922607421875,0.0009613040019758045673370361328125,0.000030518000130541622638702392578125,-0.00019836399587802588939666748046875,-0.0024566650390625,-0.00109863304533064365386962890625,-0.0305328369140625,-0.035552978515625,-0.1463623046875,-0.3498687744140625,-1.1012115478515625,0.7912139892578125,-0.00106811500154435634613037109375,0.120697021484375,-0.021575927734375,0.0151214599609375,-0.00341796898283064365386962890625,0.00088500999845564365386962890625,0.000030518000130541622638702392578125,-0.000213623003219254314899444580078125,-0.0025787348859012126922607421875,-0.0016937260515987873077392578125,-0.031005859375,-0.0406341552734375,-0.1432647705078125,-0.376800537109375,-1.1113739013671875,0.7650299072265625,-0.016510009765625,0.1159210205078125,-0.0234222412109375,0.0140228271484375,-0.00346374488435685634613037109375,0.0008087159949354827404022216796875,0.000030518000130541622638702392578125,-0.00024414100334979593753814697265625,-0.00268554710783064365386962890625,-0.00233459495939314365386962890625,-0.0313873291015625,-0.04583740234375,-0.1394500732421875,-0.404083251953125,-1.1202239990234375,0.738372802734375,-0.0310821533203125,0.1109466552734375,-0.02508544921875,0.012939453125,-0.00347900390625,0.000747681013308465480804443359375,0.0000152590000652708113193511962890625,-0.0002593990066088736057281494140625,-0.0027923579327762126922607421875,-0.0030059809796512126922607421875,-0.0316619873046875,-0.0511322021484375,-0.1348876953125,-0.4316558837890625,-1.12774658203125,0.7113189697265625,-0.0447845458984375,0.1058197021484375,-0.0265350341796875,0.0118865966796875,-0.00347900390625,0.0006866459734737873077392578125,0.0000152590000652708113193511962890625,-0.0002899169921875,-0.002899169921875,-0.0037231449969112873077392578125,-0.0318145751953125,-0.0565338134765625,-0.12957763671875,-0.45947265625,-1.1339263916015625,0.6839141845703125,-0.0576171875,0.1005401611328125,-0.027801513671875,0.0108489990234375,-0.00346374488435685634613037109375,0.000625610002316534519195556640625,0.0000152590000652708113193511962890625,-0.00032043500686995685100555419921875,-0.00299072288908064365386962890625,-0.004486083984375,-0.0318450927734375,-0.0619964599609375,-0.12347412109375,-0.4874725341796875,-1.138763427734375,0.656219482421875,-0.0695953369140625,0.0951690673828125,-0.0288848876953125,0.0098419189453125,-0.0034332280047237873077392578125,0.000579833984375,0.0000152590000652708113193511962890625,-0.0003662109957076609134674072265625,-0.0030822749249637126922607421875,-0.0052947998046875,-0.03173828125,-0.0675201416015625,-0.1165771484375,-0.5156097412109375,-1.1422119140625,0.6282958984375,-0.0806884765625,0.0897064208984375,-0.02978515625,0.0088653564453125,-0.00338745093904435634613037109375,0.0005340580246411263942718505859375,0.0000152590000652708113193511962890625,-0.00039672901039011776447296142578125,-0.00317382789216935634613037109375,-0.0061187739484012126922607421875,-0.0314788818359375,-0.07305908203125,-0.108856201171875,-0.5438232421875,-1.144287109375,0.6002197265625,-0.0909271240234375,0.0841827392578125,-0.030517578125,0.007919312454760074615478515625,-0.003326416015625,0.0004730219952762126922607421875,0.0000152590000652708113193511962890625";
        stringArray = "0,-0.000442504999227821826934814453125,0.0032501220703125,-0.0070037841796875,0.0310821533203125,-0.0786285400390625,0.100311279296875,-0.5720367431640625,1.144989013671875,0.5720367431640625,0.100311279296875,0.0786285400390625,0.0310821533203125,0.0070037841796875,0.0032501220703125,0.000442504999227821826934814453125,-0.0000152590000652708113193511962890625,-0.0004730219952762126922607421875,0.003326416015625,-0.007919312454760074615478515625,0.030517578125,-0.0841827392578125,0.0909271240234375,-0.6002197265625,1.144287109375,0.5438232421875,0.108856201171875,0.07305908203125,0.0314788818359375,0.0061187739484012126922607421875,0.00317382789216935634613037109375,0.00039672901039011776447296142578125,-0.0000152590000652708113193511962890625,-0.0005340580246411263942718505859375,0.00338745093904435634613037109375,-0.0088653564453125,0.02978515625,-0.0897064208984375,0.0806884765625,-0.6282958984375,1.1422119140625,0.5156097412109375,0.1165771484375,0.0675201416015625,0.03173828125,0.0052947998046875,0.0030822749249637126922607421875,0.0003662109957076609134674072265625,-0.0000152590000652708113193511962890625,-0.000579833984375,0.0034332280047237873077392578125,-0.0098419189453125,0.0288848876953125,-0.0951690673828125,0.0695953369140625,-0.656219482421875,1.138763427734375,0.4874725341796875,0.12347412109375,0.0619964599609375,0.0318450927734375,0.004486083984375,0.00299072288908064365386962890625,0.00032043500686995685100555419921875,-0.0000152590000652708113193511962890625,-0.000625610002316534519195556640625,0.00346374488435685634613037109375,-0.0108489990234375,0.027801513671875,-0.1005401611328125,0.0576171875,-0.6839141845703125,1.1339263916015625,0.45947265625,0.12957763671875,0.0565338134765625,0.0318145751953125,0.0037231449969112873077392578125,0.002899169921875,0.0002899169921875,-0.0000152590000652708113193511962890625,-0.0006866459734737873077392578125,0.00347900390625,-0.0118865966796875,0.0265350341796875,-0.1058197021484375,0.0447845458984375,-0.7113189697265625,1.12774658203125,0.4316558837890625,0.1348876953125,0.0511322021484375,0.0316619873046875,0.0030059809796512126922607421875,0.0027923579327762126922607421875,0.0002593990066088736057281494140625,-0.0000152590000652708113193511962890625,-0.000747681013308465480804443359375,0.00347900390625,-0.012939453125,0.02508544921875,-0.1109466552734375,0.0310821533203125,-0.738372802734375,1.1202239990234375,0.404083251953125,0.1394500732421875,0.04583740234375,0.0313873291015625,0.00233459495939314365386962890625,0.00268554710783064365386962890625,0.00024414100334979593753814697265625,-0.000030518000130541622638702392578125,-0.0008087159949354827404022216796875,0.00346374488435685634613037109375,-0.0140228271484375,0.0234222412109375,-0.1159210205078125,0.016510009765625,-0.7650299072265625,1.1113739013671875,0.376800537109375,0.1432647705078125,0.0406341552734375,0.031005859375,0.0016937260515987873077392578125,0.0025787348859012126922607421875,0.000213623003219254314899444580078125,-0.000030518000130541622638702392578125,-0.00088500999845564365386962890625,0.00341796898283064365386962890625,-0.0151214599609375,0.021575927734375,-0.120697021484375,0.00106811500154435634613037109375,-0.7912139892578125,1.1012115478515625,0.3498687744140625,0.1463623046875,0.035552978515625,0.0305328369140625,0.00109863304533064365386962890625,0.0024566650390625,0.00019836399587802588939666748046875,-0.000030518000130541622638702392578125,-0.0009613040019758045673370361328125,0.0033721919171512126922607421875,-0.0162353515625,0.01953125,-0.1252593994140625,-0.015228270553052425384521484375,-0.816864013671875,1.08978271484375,0.3233184814453125,0.148773193359375,0.030609130859375,0.029937744140625,0.0005493159987963736057281494140625,0.0023498539812862873077392578125,0.00016784699982963502407073974609375,-0.000030518000130541622638702392578125,-0.001037598005495965480804443359375,0.0032806401140987873077392578125,-0.0173492431640625,0.0172576904296875,-0.1295623779296875,-0.032379150390625,-0.841949462890625,1.077117919921875,0.297210693359375,0.1504974365234375,0.02581787109375,0.0292816162109375,0.000030518000130541622638702392578125,0.0022430419921875,0.000152588007040321826934814453125,-0.00004577599975164048373699188232421875,-0.001113891950808465480804443359375,0.00317382789216935634613037109375,-0.018463134765625,0.014801025390625,-0.1335906982421875,-0.05035400390625,-0.866363525390625,1.0632171630859375,0.2715911865234375,0.1515960693359375,0.02117919921875,0.028533935546875,-0.000442504999227821826934814453125,0.00212097191251814365386962890625,0.000137328999699093401432037353515625,-0.00004577599975164048373699188232421875,-0.001205443986691534519195556640625,0.00305175804533064365386962890625,-0.0195770263671875,0.012115479446947574615478515625,-0.137298583984375,-0.0691680908203125,-0.8900909423828125,1.04815673828125,0.2465057373046875,0.152069091796875,0.0167083740234375,0.0277252197265625,-0.0008697509765625,0.00201415992341935634613037109375,0.0001220699996338225901126861572265625,-0.00006103499981691129505634307861328125,-0.001296996953897178173065185546875,0.00288391089998185634613037109375,-0.02069091796875,0.0092315673828125,-0.1406707763671875,-0.088775634765625,-0.913055419921875,1.0319366455078125,0.22198486328125,0.1519622802734375,0.012420654296875,0.0268402099609375,-0.0012664790265262126922607421875,0.001907348982058465480804443359375,0.0001068119963747449219226837158203125,-0.00006103499981691129505634307861328125,-0.00138855003751814365386962890625,0.00270080589689314365386962890625,-0.02178955078125,0.006134033203125,-0.1436767578125,-0.109161376953125,-0.9351959228515625,1.014617919921875,0.19805908203125,0.15130615234375,0.0083160400390625,0.025909423828125,-0.001617431989870965480804443359375,0.001785277971066534519195556640625,0.0001068119963747449219226837158203125,-0.0000762940035201609134674072265625,-0.0014801030047237873077392578125,0.0024871830828487873077392578125,-0.022857666015625,0.0028228759765625,-0.1462554931640625,-0.13031005859375,-0.95648193359375,0.996246337890625,0.1747894287109375,0.150115966796875,0.0043945307843387126922607421875,0.024932861328125,-0.00193786597810685634613037109375,0.0016937260515987873077392578125,0.0000915530035854317247867584228515625,-0.0000762940035201609134674072265625,-0.001586913946084678173065185546875,0.00222778297029435634613037109375,-0.0239105224609375,-0.0006866459734737873077392578125,-0.1484222412109375,-0.1522064208984375,-0.9768524169921875,0.9768524169921875,0.1522064208984375,0.1484222412109375,0.0006866459734737873077392578125,0.0239105224609375,-0.00222778297029435634613037109375,0.001586913946084678173065185546875,0.0000762940035201609134674072265625,-0.0000915530035854317247867584228515625,-0.0016937260515987873077392578125,0.00193786597810685634613037109375,-0.024932861328125,-0.0043945307843387126922607421875,-0.150115966796875,-0.1747894287109375,-0.996246337890625,0.95648193359375,0.13031005859375,0.1462554931640625,-0.0028228759765625,0.022857666015625,-0.0024871830828487873077392578125,0.0014801030047237873077392578125,0.0000762940035201609134674072265625,-0.0001068119963747449219226837158203125,-0.001785277971066534519195556640625,0.001617431989870965480804443359375,-0.025909423828125,-0.0083160400390625,-0.15130615234375,-0.19805908203125,-1.014617919921875,0.9351959228515625,0.109161376953125,0.1436767578125,-0.006134033203125,0.02178955078125,-0.00270080589689314365386962890625,0.00138855003751814365386962890625,0.00006103499981691129505634307861328125,-0.0001068119963747449219226837158203125,-0.001907348982058465480804443359375,0.0012664790265262126922607421875,-0.0268402099609375,-0.012420654296875,-0.1519622802734375,-0.22198486328125,-1.0319366455078125,0.913055419921875,0.088775634765625,0.1406707763671875,-0.0092315673828125,0.02069091796875,-0.00288391089998185634613037109375,0.001296996953897178173065185546875,0.00006103499981691129505634307861328125,-0.0001220699996338225901126861572265625,-0.00201415992341935634613037109375,0.0008697509765625,-0.0277252197265625,-0.0167083740234375,-0.152069091796875,-0.2465057373046875,-1.04815673828125,0.8900909423828125,0.0691680908203125,0.137298583984375,-0.012115479446947574615478515625,0.0195770263671875,-0.00305175804533064365386962890625,0.001205443986691534519195556640625,0.00004577599975164048373699188232421875,-0.000137328999699093401432037353515625,-0.00212097191251814365386962890625,0.000442504999227821826934814453125,-0.028533935546875,-0.02117919921875,-0.1515960693359375,-0.2715911865234375,-1.0632171630859375,0.866363525390625,0.05035400390625,0.1335906982421875,-0.014801025390625,0.018463134765625,-0.00317382789216935634613037109375,0.001113891950808465480804443359375,0.00004577599975164048373699188232421875,-0.000152588007040321826934814453125,-0.0022430419921875,-0.000030518000130541622638702392578125,-0.0292816162109375,-0.02581787109375,-0.1504974365234375,-0.297210693359375,-1.077117919921875,0.841949462890625,0.032379150390625,0.1295623779296875,-0.0172576904296875,0.0173492431640625,-0.0032806401140987873077392578125,0.001037598005495965480804443359375,0.000030518000130541622638702392578125,-0.00016784699982963502407073974609375,-0.0023498539812862873077392578125,-0.0005493159987963736057281494140625,-0.029937744140625,-0.030609130859375,-0.148773193359375,-0.3233184814453125,-1.08978271484375,0.816864013671875,0.015228270553052425384521484375,0.1252593994140625,-0.01953125,0.0162353515625,-0.0033721919171512126922607421875,0.0009613040019758045673370361328125,0.000030518000130541622638702392578125,-0.00019836399587802588939666748046875,-0.0024566650390625,-0.00109863304533064365386962890625,-0.0305328369140625,-0.035552978515625,-0.1463623046875,-0.3498687744140625,-1.1012115478515625,0.7912139892578125,-0.00106811500154435634613037109375,0.120697021484375,-0.021575927734375,0.0151214599609375,-0.00341796898283064365386962890625,0.00088500999845564365386962890625,0.000030518000130541622638702392578125,-0.000213623003219254314899444580078125,-0.0025787348859012126922607421875,-0.0016937260515987873077392578125,-0.031005859375,-0.0406341552734375,-0.1432647705078125,-0.376800537109375,-1.1113739013671875,0.7650299072265625,-0.016510009765625,0.1159210205078125,-0.0234222412109375,0.0140228271484375,-0.00346374488435685634613037109375,0.0008087159949354827404022216796875,0.000030518000130541622638702392578125,-0.00024414100334979593753814697265625,-0.00268554710783064365386962890625,-0.00233459495939314365386962890625,-0.0313873291015625,-0.04583740234375,-0.1394500732421875,-0.404083251953125,-1.1202239990234375,0.738372802734375,-0.0310821533203125,0.1109466552734375,-0.02508544921875,0.012939453125,-0.00347900390625,0.000747681013308465480804443359375,0.0000152590000652708113193511962890625,-0.0002593990066088736057281494140625,-0.0027923579327762126922607421875,-0.0030059809796512126922607421875,-0.0316619873046875,-0.0511322021484375,-0.1348876953125,-0.4316558837890625,-1.12774658203125,0.7113189697265625,-0.0447845458984375,0.1058197021484375,-0.0265350341796875,0.0118865966796875,-0.00347900390625,0.0006866459734737873077392578125,0.0000152590000652708113193511962890625,-0.0002899169921875,-0.002899169921875,-0.0037231449969112873077392578125,-0.0318145751953125,-0.0565338134765625,-0.12957763671875,-0.45947265625,-1.1339263916015625,0.6839141845703125,-0.0576171875,0.1005401611328125,-0.027801513671875,0.0108489990234375,-0.00346374488435685634613037109375,0.000625610002316534519195556640625,0.0000152590000652708113193511962890625,-0.00032043500686995685100555419921875,-0.00299072288908064365386962890625,-0.004486083984375,-0.0318450927734375,-0.0619964599609375,-0.12347412109375,-0.4874725341796875,-1.138763427734375,0.656219482421875,-0.0695953369140625,0.0951690673828125,-0.0288848876953125,0.0098419189453125,-0.0034332280047237873077392578125,0.000579833984375,0.0000152590000652708113193511962890625,-0.0003662109957076609134674072265625,-0.0030822749249637126922607421875,-0.0052947998046875,-0.03173828125,-0.0675201416015625,-0.1165771484375,-0.5156097412109375,-1.1422119140625,0.6282958984375,-0.0806884765625,0.0897064208984375,-0.02978515625,0.0088653564453125,-0.00338745093904435634613037109375,0.0005340580246411263942718505859375,0.0000152590000652708113193511962890625,-0.00039672901039011776447296142578125,-0.00317382789216935634613037109375,-0.0061187739484012126922607421875,-0.0314788818359375,-0.07305908203125,-0.108856201171875,-0.5438232421875,-1.144287109375,0.6002197265625,-0.0909271240234375,0.0841827392578125,-0.030517578125,0.007919312454760074615478515625,-0.003326416015625,0.0004730219952762126922607421875,0.0000152590000652708113193511962890625".split(",");
        float[] fArray = new float[stringArray.length];
        int n2 = 0;
        while (n2 < fArray.length) {
            fArray[n2] = new BigDecimal(stringArray[n2]).floatValue();
            ++n2;
        }
        return fArray;
    }

    private static float[][] a(float[] fArray, int n2) {
        n2 = fArray.length / 16;
        float[][] fArrayArray = new float[n2][];
        int n3 = 0;
        while (n3 < n2) {
            int n4 = n3 << 4;
            int n5 = 16;
            float[] fArray2 = fArray;
            if (n4 + n5 > fArray2.length) {
                n5 = fArray2.length - n4;
            }
            if (n5 < 0) {
                n5 = 0;
            }
            float[] fArray3 = new float[n5];
            int n6 = 0;
            while (n6 < n5) {
                fArray3[n6] = fArray2[n4 + n6];
                ++n6;
            }
            fArrayArray[n3] = fArray3;
            ++n3;
        }
        return fArrayArray;
    }
}

