/*
 * Decompiled with CFR 0.152.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import net.ccbluex.liquidbounce.api.minecraft.client.block.IBlock;
import net.ccbluex.liquidbounce.api.minecraft.client.network.IINetHandlerPlayClient;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayer;
import net.ccbluex.liquidbounce.api.minecraft.util.IAxisAlignedBB;
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
import net.ccbluex.liquidbounce.event.BlockBBEvent;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MoveEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.PushOutEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.value.ListValue;

@ModuleInfo(name="Phase", description="Allows you to walk through blocks.", category=ModuleCategory.EXPLOIT)
public class Phase
extends Module {
    private final TickTimer tickTimer;
    private final ListValue modeValue = new ListValue("Mode", new String[]{"Vanilla", "Skip", "Spartan", "Clip", "AAC3.5.0", "Mineplex"}, "Vanilla");
    private boolean mineplexClip;
    private final TickTimer mineplexTickTimer;

    @Override
    public String getTag() {
        return (String)this.modeValue.get();
    }

    @EventTarget
    public void onPushOut(PushOutEvent pushOutEvent) {
        pushOutEvent.cancelEvent();
    }

    @EventTarget
    public void onUpdate(UpdateEvent updateEvent) {
        boolean bl = BlockUtils.collideBlockIntersects(mc.getThePlayer().getEntityBoundingBox(), Phase::lambda$onUpdate$0);
        if (bl && !((String)this.modeValue.get()).equalsIgnoreCase("Mineplex")) {
            mc.getThePlayer().setNoClip(true);
            mc.getThePlayer().setMotionY(0.0);
            mc.getThePlayer().setOnGround(false);
        }
        IINetHandlerPlayClient iINetHandlerPlayClient = mc.getNetHandler();
        switch (((String)this.modeValue.get()).toLowerCase()) {
            case "vanilla": {
                if (!mc.getThePlayer().getOnGround() || !this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || bl && !mc.getThePlayer().isSneaking()) break;
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(0.5, 0.0, 0.5, true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() + 0.2, mc.getThePlayer().getPosZ(), true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(0.5, 0.0, 0.5, true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX() + 0.5, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + 0.5, true));
                double d = Math.toRadians(mc.getThePlayer().getRotationYaw());
                double d2 = -Math.sin(d) * 0.04;
                double d3 = Math.cos(d) * 0.04;
                mc.getThePlayer().setPosition(mc.getThePlayer().getPosX() + d2, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + d3);
                this.tickTimer.reset();
                break;
            }
            case "skip": {
                if (!mc.getThePlayer().getOnGround() || !this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || bl && !mc.getThePlayer().isSneaking()) break;
                double d = MovementUtils.getDirection();
                double d4 = -Math.sin(d) * 0.3;
                double d5 = Math.cos(d) * 0.3;
                for (int i = 0; i < 3; ++i) {
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() + 0.06, mc.getThePlayer().getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX() + d4 * (double)i, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + d5 * (double)i, true));
                }
                mc.getThePlayer().setEntityBoundingBox(mc.getThePlayer().getEntityBoundingBox().offset(d4, 0.0, d5));
                mc.getThePlayer().setPositionAndUpdate(mc.getThePlayer().getPosX() + d4, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + d5);
                this.tickTimer.reset();
                break;
            }
            case "spartan": {
                if (!mc.getThePlayer().getOnGround() || !this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || bl && !mc.getThePlayer().isSneaking()) break;
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(0.5, 0.0, 0.5, true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY() - 0.2, mc.getThePlayer().getPosZ(), true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(0.5, 0.0, 0.5, true));
                iINetHandlerPlayClient.addToSendQueue(classProvider.createCPacketPlayerPosition(mc.getThePlayer().getPosX() + 0.5, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + 0.5, true));
                double d = Math.toRadians(mc.getThePlayer().getRotationYaw());
                double d6 = -Math.sin(d) * 0.04;
                double d7 = Math.cos(d) * 0.04;
                mc.getThePlayer().setPosition(mc.getThePlayer().getPosX() + d6, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + d7);
                this.tickTimer.reset();
                break;
            }
            case "clip": {
                if (!this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || bl && !mc.getThePlayer().isSneaking()) break;
                double d = Math.toRadians(mc.getThePlayer().getRotationYaw());
                double d8 = mc.getThePlayer().getPosX();
                double d9 = mc.getThePlayer().getPosZ();
                for (int i = 1; i <= 10; ++i) {
                    double d10 = -Math.sin(d) * (double)i;
                    double d11 = Math.cos(d) * (double)i;
                    if (!classProvider.isBlockAir(BlockUtils.getBlock(new WBlockPos(d8 + d10, mc.getThePlayer().getPosY(), d9 + d11))) || !classProvider.isBlockAir(BlockUtils.getBlock(new WBlockPos(d8 + d10, mc.getThePlayer().getPosY() + 1.0, d9 + d11)))) continue;
                    mc.getThePlayer().setPosition(d8 + d10, mc.getThePlayer().getPosY(), d9 + d11);
                    break;
                }
                this.tickTimer.reset();
                break;
            }
            case "aac3.5.0": {
                if (!this.tickTimer.hasTimePassed(2) || !mc.getThePlayer().isCollidedVertically() || bl && !mc.getThePlayer().isSneaking()) break;
                double d = Math.toRadians(mc.getThePlayer().getRotationYaw());
                double d12 = mc.getThePlayer().getPosX();
                double d13 = mc.getThePlayer().getPosZ();
                double d14 = -Math.sin(d);
                double d15 = Math.cos(d);
                mc.getThePlayer().setPosition(d12 + d14, mc.getThePlayer().getPosY(), d13 + d15);
                this.tickTimer.reset();
                break;
            }
        }
        this.tickTimer.update();
    }

    @EventTarget
    public void onBlockBB(BlockBBEvent blockBBEvent) {
        if (mc.getThePlayer() != null && BlockUtils.collideBlockIntersects(mc.getThePlayer().getEntityBoundingBox(), Phase::lambda$onBlockBB$1) && blockBBEvent.getBoundingBox() != null && blockBBEvent.getBoundingBox().getMaxY() > mc.getThePlayer().getEntityBoundingBox().getMinY() && !((String)this.modeValue.get()).equalsIgnoreCase("Mineplex")) {
            IAxisAlignedBB iAxisAlignedBB = blockBBEvent.getBoundingBox();
            blockBBEvent.setBoundingBox(classProvider.createAxisAlignedBB(iAxisAlignedBB.getMaxX(), mc.getThePlayer().getEntityBoundingBox().getMinY(), iAxisAlignedBB.getMaxZ(), iAxisAlignedBB.getMinX(), iAxisAlignedBB.getMinY(), iAxisAlignedBB.getMinZ()));
        }
    }

    @EventTarget
    private void onMove(MoveEvent moveEvent) {
        if (((String)this.modeValue.get()).equalsIgnoreCase("mineplex")) {
            if (mc.getThePlayer().isCollidedVertically()) {
                this.mineplexClip = true;
            }
            if (!this.mineplexClip) {
                return;
            }
            this.mineplexTickTimer.update();
            moveEvent.setX(0.0);
            moveEvent.setZ(0.0);
            if (this.mineplexTickTimer.hasTimePassed(3)) {
                this.mineplexTickTimer.reset();
                this.mineplexClip = false;
            } else if (this.mineplexTickTimer.hasTimePassed(1)) {
                double d = this.mineplexTickTimer.hasTimePassed(2) ? 1.6 : 0.06;
                double d2 = MovementUtils.getDirection();
                mc.getThePlayer().setPosition(mc.getThePlayer().getPosX() + -Math.sin(d2) * d, mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ() + Math.cos(d2) * d);
            }
        }
    }

    public Phase() {
        this.tickTimer = new TickTimer();
        this.mineplexTickTimer = new TickTimer();
    }

    private static Boolean lambda$onBlockBB$1(IBlock iBlock) {
        return !classProvider.isBlockAir(iBlock);
    }

    private static Boolean lambda$onUpdate$0(IBlock iBlock) {
        return !classProvider.isBlockAir(iBlock);
    }

    @EventTarget
    public void onPacket(PacketEvent packetEvent) {
        IPacket iPacket = packetEvent.getPacket();
        if (classProvider.isCPacketPlayer(iPacket)) {
            ICPacketPlayer iCPacketPlayer = iPacket.asCPacketPlayer();
            if (((String)this.modeValue.get()).equalsIgnoreCase("AAC3.5.0")) {
                float f = (float)MovementUtils.getDirection();
                iCPacketPlayer.setX(iCPacketPlayer.getX() - Math.sin(f) * 1.0E-8);
                iCPacketPlayer.setZ(iCPacketPlayer.getZ() + Math.cos(f) * 1.0E-8);
            }
        }
    }
}

