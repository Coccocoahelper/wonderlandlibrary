/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  javax.vecmath.Vector3f
 *  org.lwjgl.input.Mouse
 *  org.lwjgl.opengl.GL11
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.vecmath.Vector3f;
import net.ccbluex.liquidbounce.api.enums.MaterialType;
import net.ccbluex.liquidbounce.api.minecraft.block.state.IIBlockState;
import net.ccbluex.liquidbounce.api.minecraft.renderer.entity.IRenderManager;
import net.ccbluex.liquidbounce.api.minecraft.util.IMovingObjectPosition;
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.Render3DEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.ListValue;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

@ModuleInfo(name="ItemTeleport", description="Allows you to pick up items far away.", category=ModuleCategory.EXPLOIT)
public class ItemTeleport
extends Module {
    private final BoolValue resetAfterTp;
    private final ListValue modeValue = new ListValue("Mode", new String[]{"New", "Old"}, "New");
    private int delay;
    private WBlockPos endPos;
    private final ListValue buttonValue;
    private IMovingObjectPosition objectPosition;

    public ItemTeleport() {
        this.resetAfterTp = new BoolValue("ResetAfterTP", true);
        this.buttonValue = new ListValue("Button", new String[]{"Left", "Right", "Middle"}, "Middle");
    }

    private List vanillaTeleportPositions(double d, double d2, double d3, double d4) {
        double d5;
        ArrayList<Vector3f> arrayList = new ArrayList<Vector3f>();
        double d6 = d - mc.getThePlayer().getPosX();
        double d7 = d3 - mc.getThePlayer().getPosZ();
        float f = (float)(Math.atan2(d7, d6) * 180.0 / Math.PI - 90.0);
        double d8 = mc.getThePlayer().getPosY();
        double d9 = 1.0;
        for (d5 = d4; d5 < this.getDistance(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), d, d2, d3); d5 += d4) {
            d9 += 1.0;
        }
        for (d5 = d4; d5 < this.getDistance(mc.getThePlayer().getPosX(), mc.getThePlayer().getPosY(), mc.getThePlayer().getPosZ(), d, d2, d3); d5 += d4) {
            double d10 = mc.getThePlayer().getPosX() - Math.sin(Math.toRadians(f)) * d5;
            double d11 = mc.getThePlayer().getPosZ() + Math.cos(Math.toRadians(f)) * d5;
            arrayList.add(new Vector3f((float)d10, (float)(d8 -= (mc.getThePlayer().getPosY() - d2) / d9), (float)d11));
        }
        arrayList.add(new Vector3f((float)d, (float)d2, (float)d3));
        return arrayList;
    }

    @EventTarget
    public void onRender3D(Render3DEvent render3DEvent) {
        this.objectPosition = mc.getThePlayer().rayTrace(1000.0, render3DEvent.getPartialTicks());
        if (this.objectPosition.getBlockPos() == null) {
            return;
        }
        int n = this.objectPosition.getBlockPos().getX();
        int n2 = this.objectPosition.getBlockPos().getY();
        int n3 = this.objectPosition.getBlockPos().getZ();
        IIBlockState iIBlockState = BlockUtils.getState(this.objectPosition.getBlockPos());
        if (!iIBlockState.getBlock().getMaterial(iIBlockState).equals(classProvider.getMaterialEnum(MaterialType.AIR))) {
            IRenderManager iRenderManager = mc.getRenderManager();
            GL11.glBlendFunc((int)770, (int)771);
            GL11.glEnable((int)3042);
            GL11.glLineWidth((float)2.0f);
            GL11.glDisable((int)3553);
            GL11.glDisable((int)2929);
            GL11.glDepthMask((boolean)false);
            IIBlockState iIBlockState2 = BlockUtils.getState(this.objectPosition.getBlockPos().up());
            RenderUtils.glColor(!iIBlockState2.getBlock().getMaterial(iIBlockState2).equals(classProvider.getMaterialEnum(MaterialType.AIR)) ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90));
            RenderUtils.drawFilledBox(classProvider.createAxisAlignedBB((double)n - iRenderManager.getRenderPosX(), (double)(n2 + 1) - iRenderManager.getRenderPosY(), (double)n3 - iRenderManager.getRenderPosZ(), (double)n - iRenderManager.getRenderPosX() + 1.0, (double)n2 + 1.2 - iRenderManager.getRenderPosY(), (double)n3 - iRenderManager.getRenderPosZ() + 1.0));
            GL11.glEnable((int)3553);
            GL11.glEnable((int)2929);
            GL11.glDepthMask((boolean)true);
            GL11.glDisable((int)3042);
            RenderUtils.renderNameTag(Math.round(mc.getThePlayer().getDistance(n, n2, n3)) + "m", (double)n + 0.5, (double)n2 + 1.7, (double)n3 + 0.5);
            classProvider.getGlStateManager().resetColor();
        }
    }

    @EventTarget
    public void onUpdate(UpdateEvent updateEvent) {
        Object object;
        if (mc.getCurrentScreen() == null && Mouse.isButtonDown((int)Arrays.asList(this.buttonValue.getValues()).indexOf(this.buttonValue.get())) && this.delay <= 0) {
            this.endPos = this.objectPosition.getBlockPos();
            object = BlockUtils.getState(this.endPos);
            if (object.getBlock().getMaterial((IIBlockState)object) == classProvider.getMaterialEnum(MaterialType.AIR)) {
                this.endPos = null;
                return;
            }
            ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lItemTeleport\u00a77] \u00a73Position was set to \u00a78" + this.endPos.getX() + "\u00a73, \u00a78" + this.endPos.getY() + "\u00a73, \u00a78" + this.endPos.getZ());
            this.delay = 6;
        }
        if (this.delay > 0) {
            --this.delay;
        }
        if ((object = mc.getThePlayer()) == null) {
            return;
        }
        if (this.endPos != null && object.isSneaking()) {
            if (!object.getOnGround()) {
                double d = (double)this.endPos.getX() + 0.5;
                double d2 = (double)this.endPos.getY() + 1.0;
                double d3 = (double)this.endPos.getZ() + 0.5;
                switch (((String)this.modeValue.get()).toLowerCase()) {
                    case "old": {
                        for (Vector3f vector3f : this.vanillaTeleportPositions(d, d2, d3, 4.0)) {
                            mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(vector3f.getX(), vector3f.getY(), vector3f.getZ(), false));
                        }
                        break;
                    }
                    case "new": {
                        for (Vector3f vector3f : this.vanillaTeleportPositions(d, d2, d3, 5.0)) {
                            mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(object.getPosX(), object.getPosY(), object.getPosZ(), true));
                            mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(vector3f.x, vector3f.y, vector3f.z, true));
                            mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(object.getPosX(), object.getPosY(), object.getPosZ(), true));
                            mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(object.getPosX(), object.getPosY() + 4.0, object.getPosZ(), true));
                            mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(vector3f.x, vector3f.y, vector3f.z, true));
                            MovementUtils.forward(0.04);
                        }
                        break;
                    }
                }
                if (((Boolean)this.resetAfterTp.get()).booleanValue()) {
                    this.endPos = null;
                }
                ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lItemTeleport\u00a77] \u00a73Tried to collect items");
            } else {
                object.jump();
            }
        }
    }

    @Override
    public void onDisable() {
        this.delay = 0;
        this.endPos = null;
        super.onDisable();
    }

    private double getDistance(double d, double d2, double d3, double d4, double d5, double d6) {
        double d7 = d - d4;
        double d8 = d2 - d5;
        double d9 = d3 - d6;
        return Math.sqrt(d7 * d7 + d8 * d8 + d9 * d9);
    }
}

