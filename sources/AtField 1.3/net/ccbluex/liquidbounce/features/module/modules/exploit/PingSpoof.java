/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  kotlin.Unit
 *  kotlin.jvm.internal.Intrinsics
 *  org.jetbrains.annotations.Nullable
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import kotlin.Unit;
import kotlin.jvm.internal.Intrinsics;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;
import net.ccbluex.liquidbounce.utils.timer.TimeUtils;
import net.ccbluex.liquidbounce.value.IntegerValue;
import org.jetbrains.annotations.Nullable;

@ModuleInfo(name="PingSpoof", description="Spoofs your ping to a given value.", category=ModuleCategory.EXPLOIT)
public final class PingSpoof
extends Module {
    private final IntegerValue maxDelayValue;
    private final IntegerValue minDelayValue = new IntegerValue(this, "MinDelay", 500, 0, 5000){
        final PingSpoof this$0;

        static {
        }
        {
            this.this$0 = pingSpoof;
            super(string, n, n2, n3);
        }

        protected void onChanged(int n, int n2) {
            int n3 = ((Number)PingSpoof.access$getMaxDelayValue$p(this.this$0).get()).intValue();
            if (n3 < n2) {
                this.set((Object)n3);
            }
        }

        public void onChanged(Object object, Object object2) {
            this.onChanged(((Number)object).intValue(), ((Number)object2).intValue());
        }
    };
    private final HashMap packetsMap;

    @Override
    public void onDisable() {
        this.packetsMap.clear();
    }

    @EventTarget(ignoreCondition=true)
    public final void onUpdate(@Nullable UpdateEvent updateEvent) {
        HashMap hashMap = this.packetsMap;
        boolean bl = false;
        boolean bl2 = false;
        synchronized (hashMap) {
            boolean bl3 = false;
            Iterator iterator2 = this.packetsMap.entrySet().iterator();
            while (iterator2.hasNext()) {
                Map.Entry entry = iterator2.next();
                if (((Number)entry.getValue()).longValue() >= System.currentTimeMillis()) continue;
                MinecraftInstance.mc.getNetHandler().addToSendQueue((IPacket)entry.getKey());
                iterator2.remove();
            }
            Unit unit = Unit.INSTANCE;
        }
    }

    public static final IntegerValue access$getMaxDelayValue$p(PingSpoof pingSpoof) {
        return pingSpoof.maxDelayValue;
    }

    @EventTarget
    public final void onPacket(PacketEvent packetEvent) {
        block5: {
            IPacket iPacket = packetEvent.getPacket();
            if (!MinecraftInstance.classProvider.isCPacketKeepAlive(iPacket) && !MinecraftInstance.classProvider.isCPacketClientStatus(iPacket)) break block5;
            IEntityPlayerSP iEntityPlayerSP = MinecraftInstance.mc.getThePlayer();
            if (iEntityPlayerSP == null) {
                Intrinsics.throwNpe();
            }
            if (!iEntityPlayerSP.isDead()) {
                IEntityPlayerSP iEntityPlayerSP2 = MinecraftInstance.mc.getThePlayer();
                if (iEntityPlayerSP2 == null) {
                    Intrinsics.throwNpe();
                }
                if (!(iEntityPlayerSP2.getHealth() <= 0.0f) && !this.packetsMap.containsKey(iPacket)) {
                    packetEvent.cancelEvent();
                    HashMap hashMap = this.packetsMap;
                    boolean bl = false;
                    boolean bl2 = false;
                    synchronized (hashMap) {
                        boolean bl3 = false;
                        Long l = this.packetsMap.put(iPacket, System.currentTimeMillis() + TimeUtils.randomDelay(((Number)this.minDelayValue.get()).intValue(), ((Number)this.maxDelayValue.get()).intValue()));
                    }
                }
            }
        }
    }

    public PingSpoof() {
        this.maxDelayValue = new IntegerValue(this, "MaxDelay", 1000, 0, 5000){
            final PingSpoof this$0;

            protected void onChanged(int n, int n2) {
                int n3 = ((Number)PingSpoof.access$getMinDelayValue$p(this.this$0).get()).intValue();
                if (n3 > n2) {
                    this.set((Object)n3);
                }
            }
            {
                this.this$0 = pingSpoof;
                super(string, n, n2, n3);
            }

            static {
            }

            public void onChanged(Object object, Object object2) {
                this.onChanged(((Number)object).intValue(), ((Number)object2).intValue());
            }
        };
        this.packetsMap = new HashMap();
    }

    public static final IntegerValue access$getMinDelayValue$p(PingSpoof pingSpoof) {
        return pingSpoof.minDelayValue;
    }
}

