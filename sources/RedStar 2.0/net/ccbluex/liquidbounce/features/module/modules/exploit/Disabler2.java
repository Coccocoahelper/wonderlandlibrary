package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.util.Iterator;
import java.util.LinkedList;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.jvm.internal.Intrinsics;
import me.utils.PacketUtils;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerBlockPlacement;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerLook;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerPosLook;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.injection.backend.PacketImpl;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.timer.MSTimer;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.IntegerValue;
import net.ccbluex.liquidbounce.value.ListValue;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketKeepAlive;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketUseEntity;
import org.jetbrains.annotations.NotNull;

@ModuleInfo(name="Disabler2", description="Spoofs your ping to a given value.", category=ModuleCategory.EXPLOIT)
@Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=1, d1={"\u0000Z\n\n\n\b\n\n\b\n\n\b\n\n\u0000\n\n\b\n\n\u0000\n\n\n\n\u0000\n\n\b\n\n\b\n\n\u0000\n\n\u0000\b\u000020BÂ¢J020HJ\b0HJ02 0!HJ\"02 0#HR0XÂ‚Â¢\n\u0000R0XÂ‚Â¢\n\u0000R0XÂ‚Â¢\n\u0000R0\bXÂ‚Â¢\n\u0000R\t0\bXÂ‚Â¢\n\u0000R\n0XÂ‚Â¢\n\u0000R0XÂ‚Â¢\n\u0000R\f0\rXÂ‚Â¢\n\u0000R0XÂ‚Â¢\n\u0000R0XÂ‚Â¢\n\u0000R0XÂ‚Â¢\n\u0000R\n\b000XÂ‚Â¢\n\u0000R08VXÂ–Â¢\bÂ¨$"}, d2={"Lnet/ccbluex/liquidbounce/features/module/modules/exploit/Disabler2;", "Lnet/ccbluex/liquidbounce/features/module/Module;", "()V", "debugValue", "Lnet/ccbluex/liquidbounce/value/BoolValue;", "fakeLagAttackValue", "fakeLagBlockValue", "fakeLagDelay", "Lnet/ccbluex/liquidbounce/utils/timer/MSTimer;", "fakeLagDuration", "fakeLagPosValue", "fakeLagSpoofValue", "isSent", "", "lagDelayValue", "Lnet/ccbluex/liquidbounce/value/IntegerValue;", "lagDurationValue", "modeValue", "Lnet/ccbluex/liquidbounce/value/ListValue;", "packetBuffer", "Ljava/util/LinkedList;", "Lnet/minecraft/network/Packet;", "Lnet/minecraft/network/play/INetHandlerPlayServer;", "tag", "", "getTag", "()Ljava/lang/String;", "debugMessage", "", "str", "onDisable", "onPacket", "event", "Lnet/ccbluex/liquidbounce/event/PacketEvent;", "onUpdate", "Lnet/ccbluex/liquidbounce/event/UpdateEvent;", "Pride"})
public final class Disabler2
extends Module {
    private final ListValue modeValue = new ListValue("PacketMode", new String[]{"FakeLag"}, "FakeLag");
    private final IntegerValue lagDelayValue = new IntegerValue("LagDelay", 0, 0, 2000);
    private final IntegerValue lagDurationValue = new IntegerValue("LagDuration", 200, 100, 1000);
    private final BoolValue debugValue = new BoolValue("Debug", false);
    private final BoolValue fakeLagBlockValue = new BoolValue("FakeLagBlock", true);
    private final BoolValue fakeLagPosValue = new BoolValue("FakeLagPosition", true);
    private final BoolValue fakeLagAttackValue = new BoolValue("FakeLagAttack", true);
    private final BoolValue fakeLagSpoofValue = new BoolValue("FakeLagC03Spoof", false);
    private boolean isSent;
    private final MSTimer fakeLagDelay = new MSTimer();
    private final MSTimer fakeLagDuration = new MSTimer();
    private final LinkedList<Packet<INetHandlerPlayServer>> packetBuffer = new LinkedList();

    @Override
    public void onDisable() {
        String string = (String)this.modeValue.get();
        boolean bl = false;
        String string2 = string;
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        String string3 = string2.toLowerCase();
        Intrinsics.checkExpressionValueIsNotNull(string3, "(this as java.lang.String).toLowerCase()");
        string = string3;
        switch (string.hashCode()) {
            case -1084944867: {
                if (!string.equals("fakelag")) break;
                Iterator iterator = this.packetBuffer.iterator();
                while (iterator.hasNext()) {
                    Packet packet;
                    Packet packet2 = packet = (Packet)iterator.next();
                    Intrinsics.checkExpressionValueIsNotNull(packet2, "packet");
                    PacketUtils.sendPacketNoEvent((Packet<INetHandlerPlayServer>)packet2);
                }
                this.packetBuffer.clear();
                break;
            }
        }
    }

    @EventTarget
    public final void onUpdate(@NotNull UpdateEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        String string = (String)this.modeValue.get();
        boolean bl = false;
        String string2 = string;
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        String string3 = string2.toLowerCase();
        Intrinsics.checkExpressionValueIsNotNull(string3, "(this as java.lang.String).toLowerCase()");
        string = string3;
        switch (string.hashCode()) {
            case -1084944867: {
                if (!string.equals("fakelag")) break;
                if (!this.fakeLagDelay.hasTimePassed(((Number)this.lagDelayValue.get()).intValue())) {
                    this.fakeLagDuration.reset();
                }
                if (!this.fakeLagDuration.hasTimePassed(((Number)this.lagDurationValue.get()).intValue())) break;
                this.fakeLagDelay.reset();
                this.fakeLagDuration.reset();
                Iterator iterator = this.packetBuffer.iterator();
                while (iterator.hasNext()) {
                    Packet packet;
                    Packet packet2 = packet = (Packet)iterator.next();
                    Intrinsics.checkExpressionValueIsNotNull(packet2, "packet");
                    PacketUtils.sendPacketNoEvent((Packet<INetHandlerPlayServer>)packet2);
                }
                this.debugMessage("Release buf(size=" + this.packetBuffer.size() + ')');
                this.isSent = true;
                this.packetBuffer.clear();
                break;
            }
        }
    }

    @EventTarget
    public final void onPacket(@NotNull PacketEvent event) {
        Intrinsics.checkParameterIsNotNull(event, "event");
        IPacket $this$unwrap$iv = event.getPacket();
        boolean $i$f$unwrap = false;
        Object packet = ((PacketImpl)$this$unwrap$iv).getWrapped();
        String string = (String)this.modeValue.get();
        boolean bl = false;
        String string2 = string;
        if (string2 == null) {
            throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
        }
        String string3 = string2.toLowerCase();
        Intrinsics.checkExpressionValueIsNotNull(string3, "(this as java.lang.String).toLowerCase()");
        string = string3;
        switch (string.hashCode()) {
            case -1084944867: {
                if (!string.equals("fakelag") || !this.fakeLagDelay.hasTimePassed(((Number)this.lagDelayValue.get()).intValue())) break;
                if (this.isSent && ((Boolean)this.fakeLagSpoofValue.get()).booleanValue()) {
                    PacketUtils.sendPacketNoEvent((Packet<INetHandlerPlayServer>)((Packet)new CPacketPlayer(true)));
                    if (((Number)this.lagDurationValue.get()).intValue() >= 300) {
                        PacketUtils.sendPacketNoEvent((Packet<INetHandlerPlayServer>)((Packet)new CPacketPlayer(true)));
                    }
                    this.isSent = false;
                }
                if (packet instanceof CPacketKeepAlive || packet instanceof CPacketConfirmTransaction) {
                    event.cancelEvent();
                    this.packetBuffer.add((Packet<INetHandlerPlayServer>)packet);
                }
                if (((Boolean)this.fakeLagAttackValue.get()).booleanValue() && (packet instanceof CPacketUseEntity || packet instanceof CPacketAnimation)) {
                    event.cancelEvent();
                    this.packetBuffer.add((Packet<INetHandlerPlayServer>)packet);
                    if (packet instanceof CPacketAnimation) {
                        return;
                    }
                }
                if (((Boolean)this.fakeLagBlockValue.get()).booleanValue() && (packet instanceof CPacketPlayerDigging || packet instanceof ICPacketPlayerBlockPlacement || packet instanceof CPacketAnimation)) {
                    event.cancelEvent();
                    this.packetBuffer.add((Packet<INetHandlerPlayServer>)packet);
                }
                if (!((Boolean)this.fakeLagPosValue.get()).booleanValue() || !(packet instanceof CPacketPlayer) && !(packet instanceof CPacketPlayer.Position) && !(packet instanceof ICPacketPlayerLook) && !(packet instanceof ICPacketPlayerPosLook) && !(packet instanceof CPacketEntityAction)) break;
                event.cancelEvent();
                this.packetBuffer.add((Packet<INetHandlerPlayServer>)packet);
                break;
            }
        }
    }

    private final void debugMessage(String str) {
        if (((Boolean)this.debugValue.get()).booleanValue()) {
            ClientUtils.displayChatMessage(" [Disabler] " + str);
        }
    }

    @Override
    @NotNull
    public String getTag() {
        return (String)this.modeValue.get();
    }
}
