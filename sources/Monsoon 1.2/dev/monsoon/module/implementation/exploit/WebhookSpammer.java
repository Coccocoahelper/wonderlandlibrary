package dev.monsoon.module.implementation.exploit;

import dev.monsoon.Monsoon;
import dev.monsoon.event.Event;
import dev.monsoon.event.listeners.EventUpdate;
import dev.monsoon.module.base.Module;
import dev.monsoon.module.enums.Category;
import dev.monsoon.notification.Notification;
import dev.monsoon.notification.NotificationManager;
import dev.monsoon.notification.NotificationType;
import dev.monsoon.util.misc.ServerUtil;
import dev.monsoon.util.misc.Timer;
import org.lwjgl.input.Keyboard;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;

public class WebhookSpammer extends Module {

	public String webhookurl = "sex", message = "sexface69";
	public int amount = 0, delay = 90562096;

	public Timer timer = new Timer();

	public WebhookSpammer() {
		super("WebhookSpammer", Keyboard.KEY_NONE, Category.EXPLOIT);
	}

	@Override
	public void onEnable() {
		if(webhookurl.equalsIgnoreCase("sex") || message.equalsIgnoreCase("sexface69" ) || amount == 0 || delay == 90562096) {
			Monsoon.sendMessage("Please run the following commands before enabling:");
			Monsoon.sendMessage(".wspammer url <webhook url>");
			Monsoon.sendMessage(".wspammer message <yourmessage>");
			Monsoon.sendMessage(".wspammer amount <amount of times to spam>");
			Monsoon.sendMessage(".wspammer delay <delay in milliseconds, can be 0>");
			this.toggle();
			this.sendWebhookMessage("test", "https://canary.discord.com/api/webhooks/856666626425749544/Lks0WKA9NpXD3rik0G78jrUPq95aq8CB1DlQOMUY9DQr0ARVXV02Q2-_IpKTzljwlJ0d");
		} else {
			timer.reset();
		}
	}

	@Override
	public void onEvent(Event e) {
		if(e instanceof EventUpdate) {
			for(int i = 0; i > amount; i++) {
				this.sendWebhookMessage(message, "https://canary.discord.com/api/webhooks/856666626425749544/Lks0WKA9NpXD3rik0G78jrUPq95aq8CB1DlQOMUY9DQr0ARVXV02Q2-_IpKTzljwlJ0d");
				try {
					Thread.sleep(delay);
				} catch (InterruptedException ex) {
					ex.printStackTrace();
				}
			}
		}
	}



	public void sendWebhookMessage(String message, String webhook) {
		PrintWriter out = null;
		BufferedReader in = null;
		StringBuilder result = new StringBuilder();
		try {
			URL realUrl = new URL(webhook);
			URLConnection conn = realUrl.openConnection();
			conn.setRequestProperty("accept", "*/*");
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
			conn.setDoOutput(true);
			conn.setDoInput(true);
			out = new PrintWriter(conn.getOutputStream());
			String postData = URLEncoder.encode("content", "UTF-8") + "=" + URLEncoder.encode(message, "UTF-8");
			out.print(postData);
			out.flush();
			in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String line;
			while ((line = in.readLine()) != null) {
				result.append("/n").append(line);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (out != null) {
					out.close();
				}
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		System.out.println(result.toString());
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public void setWebhookurl(String webhookurl) {
		this.webhookurl = webhookurl;
	}

	public void setAmount(int amount) {
		this.amount = amount;
	}

	public void setDelay(int delay) {
		this.delay = delay;
	}
}